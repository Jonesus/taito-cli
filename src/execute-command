#!/bin/bash -e

export taito_mode="${taito_mode:-normal}"

if [[ ${taito_host_os:-} == "windows" ]]; then
  # Remove winptyprefix
  export taito_run="${taito_run//\/\//\/}"
  export taito_run_fg="${taito_run_fg//\/\//\/}"
  export taito_enabled_extensions="${taito_enabled_extensions//\/\//\/}"
fi

if [[ ${taito_mode} == "ci" ]]; then
  echo
  echo "--------------------------------------------------------------"
  echo taito "$@"
  echo "--------------------------------------------------------------"
  echo
fi

# Resolve paths
# NOTE: duplicate with ./taito (taito_cli_path must be resolved before
# other scripts can be called)
export taito_home_path="${TAITO_HOME:-$HOME}"
export taito_cli_path
export taito_src_path
export taito_lib_path
export taito_util_path
export taito_project_path
taito_cli_path=$(
  # Resolve taito-cli path by following symlinks
  source="${BASH_SOURCE[0]}"
  while [[ -h "${source}" ]]; do # resolve until the file is no longer a symlink
    dir="$( cd -P "$( dirname "${source}" )" && pwd )"
    source=$(readlink "${source}")
    [[ ${source} != /* ]] && source="${taito_cli_path}/${source}"
  done
  dir=$(dirname "${source}")
  echo "${dir%/src}"
)
taito_src_path="${taito_cli_path}/src"
taito_lib_path="${taito_cli_path}/lib"
taito_util_path="${taito_cli_path}/src/util"
# shellcheck source=lib/all.bash
. "${taito_lib_path}/bash/all.bash"
# shellcheck source=core.bash
. "${taito_src_path}/core.bash"
taito_project_path=$(taito::core::print_project_path)

# Set working directory
cd "${taito_project_path}"

# Parse options
verbose=false # "${taito_verbose:-false}"
debug=false # "${taito_debug:-false}"
quiet=false # "${taito_quiet:-false}"
continue=false # "${taito_continue:-false}"
skip_override=false
skip_rest=false
args=()
while [[ $# -gt 0 ]]
do
  key="$1"
  if [[ ${skip_rest} == false ]]; then
    case $key in
        -m|--mount|-o|--organization|-p|--project)
        shift
        shift
        ;;
        -d|--dev|-a|--admin|-r|--root)
        shift
        ;;
        version)
        echo "TODO: print Taito CLI version"
        exit
        ;;
        -c|--continue)
        continue=true
        shift || :
        ;;
        -v|--verbose)
        verbose=true
        shift || :
        ;;
        -q|--quiet)
        quiet=true
        shift || :
        ;;
        -d|--dev)
        # Ignore
        shift || :
        ;;
        --debug)
        verbose=true
        debug=true
        shift || :
        ;;
        -z)
        skip_override=true
        shift || :
        ;;
        *)
        # not known -> pass it to the command
        args+=("$1")
        shift || :
        if [[ "$1" != "-"* ]]; then
          # not an option -> pass all the rest to the command
          skip_rest=true
        fi
        ;;
    esac
  else
    # Add to args to be passed for the command
    args+=("$1")
    shift || :
  fi
done

# Convert space command syntax to internal hyphen syntax
formatted=()
while IFS= read -r line; do
  formatted+=( "$line" )
done < <( taito::core::print_command_with_internal_syntax "${args[@]}" )
args=("${formatted[@]}")

# Determine command, target, env and parameters from args
env_command="${args[0]}"
env_command="${env_command,,}"
params=("${args[@]:1}")
if [[ ${env_command} == *":"* ]]; then
  IFS=':' read -ra ADDR <<< "${env_command}"
  for sect in "${ADDR[@]}"; do
    if [[ -z "${command}" ]]; then
      command="${sect}"
    # TODO: Remove hardcoded envs. They are currently required because
    # taito-config.sh has not been read yet at this point of execution
    elif [[ -z "${env}" ]] && ( \
         [[ " local dev test uat stag staging cana canary prod master " == *" ${sect} "* ]] || \
         [[ ${sect} == "feat-"* ]] ); then
      env="${sect}"
    elif [[ -z "${dest_env}" ]] && ( \
         [[ " local dev test uat stag staging cana canary prod master " == *" ${sect} "* ]] || \
         [[ ${sect} == "feat-"* ]] ); then
      dest_env="${sect}"
    else
      target="${sect}"
    fi
  done
elif [[ -z "${env_command}" ]]; then
  env_command="--help"
else
  command=${env_command}
fi

# TODO can be removed? was used for oper-
orig_command=${command}

# TODO clean up code below

# Determine env
if [[ ${env} == "" ]]; then
  # Env not given. Using local as default.
  env="local"
fi
if [[ ${env} == "master" ]]; then
  # branch name given instead of env
  env="prod"
fi
if [[ ${dest_env} == "master" ]]; then
  # branch name given instead of env
  dest_env="prod"
fi

# Handle 'taito -h'
if [[ ${command} == "-h" ]]; then
  command="--help"
fi

# Handle 'taito COMMAND --help'
if [[ " ${params[@]} " == *" -h "* ]] || \
   [[ " ${params[@]} " == *" --help "* ]]; then
  params=(${orig_command})
  command="--help"
fi

# Handle 'taito' without arguments
if [[ -z "${command}" ]]; then
  command=" "
fi

# Replace -- with __ at the beginning to match command filename naming
if [[ ${command} == "--"* ]]; then
  command="__${command#--}"
fi

# Export some variables to be used in configs and command execution
export taito_default_password="${taito_default_password:-secret}"
export taito_continue="true"
export taito_skip_override="${skip_override}"
export taito_command="${command}"
export taito_orig_command="${orig_command}"
export taito_env="${env}"
export taito_dest_env="${dest_env}"
export taito_target_env="${env}"
export taito_target="${target}"
export taito_verbose=false
export taito_debug=false
export taito_quiet=${quiet}
export taito_vout="/dev/null" # verbode mode output
export taito_dout="/dev/null" # debug mode output
export taito_options="-c"
if [[ ${taito_mode:-} == "dev" ]]; then
  taito_options="${taito_options} -d"
fi
if [[ ${taito_organization_param:-} ]]; then
  taito_options="${taito_options} -o $taito_organization_param "
fi
if [[ ${quiet} == true ]]; then
  taito_options="${taito_options} -q"
fi
if [[ ${verbose} == true ]]; then
  # Helper environment variables to be used in verbose mode
  taito_verbose=true
  taito_vout="/dev/stdout"
  taito_options="${taito_options} -v"
fi

# TODO: rename taito_docker to something better (e.g. external host)
export taito_db_proxy_bind_address="127.0.0.1"
if [[ ${taito_docker:-} == "true" ]]; then
  taito_db_proxy_bind_address="0.0.0.0"
fi

if [[ ${debug} == true ]]; then
  taito_debug=true
  echo taito_command: "${taito_command}"
  echo taito_target: "${taito_target}"
  echo taito_env: "${taito_env}"
fi

# NOTE: ci-publish is deprecated
if [[ " unit scan docs ci-publish artifact-publish build-publish " == *"${taito_command}"* ]] && \
   [[ -f ./taitoflag_images_exist ]]; then
  echo
  echo "Skipping ${taito_command}. Image already exists."
  echo
  exit 0
fi

# Set defaults
# TODO set default taito_version here

if [[ ${TAITO_CONFIG_OVERRIDE} == *"://"* ]]; then
  mkdir -p "${taito_project_path}/tmp" &> /dev/null
  wget -O "${taito_project_path}/tmp/taito-config-override" "${TAITO_CONFIG_OVERRIDE}" &> /dev/null
  export TAITO_CONFIG_OVERRIDE=${taito_project_path}/tmp/taito-config-override
fi

# Read taito-config.sh files from all locations
taito::core::export_user_config "${taito_env}"
taito::core::export_project_config "${taito_env}"

if [[ ${taito_command} == "check" ]]; then
  if [[ $(whoami) == "taito" ]] || [[ $(whoami) == "root" ]]; then
    echo
    echo "Taito CLI is OK!"
    exit
  else
    echo
    echo "ERROR: 'taito' user has not been initialized properly."
    echo
    echo "Run 'taito upgrade'."
    exit 1
  fi
fi

if [[ ${taito_command} == "test" ]] && \
   [[ ${taito_mode:-} == "ci" ]] && \
   [[ ${ci_exec_test:-} != "true" ]]; then
  echo
  echo "Skipping ${taito_command} in ci mode. ci_exec_test is false."
  echo
  exit 0
fi

if [[ ${taito_command} == "release" ]] && \
   [[ ${taito_mode:-} == "ci" ]] && \
   [[ ${ci_exec_release:-} != "true" ]]; then
  echo
  echo "Skipping ${taito_command} in ci mode. ci_exec_release is false."
  echo
  exit 0
fi

if [[ ${taito_command} == "build-prepare" ]]; then
  echo
  echo "-----------------------------------------------------------------"
  echo "ENVIRONMENT: ${taito_target_env}"
  echo "IMAGE_TAG: ${params[0]}"
  echo "-----------------------------------------------------------------"
  echo
fi

# Set output formatting
export H1s="${taito_style_h1_s:-\\x1B[92m\\x1B[1m[}"  # Heading 1 start: Light green, bold
export H1e="${taito_style_h1_e:-]\\x1B[0m}"           # Heading 1 end
export H1Ps="${taito_style_h1_s:-\\x1B[95m\\x1B[1m}"  # Heading 1 prefix start: Light green, bold
export H1Pe="${taito_style_h1_e:-\\x1B[0m}"           # Heading 1 prefix end
export H2s="${taito_style_h2_s:-\\x1B[95m[}"          # Heading 2 start: Light magenta
export H2e="${taito_style_h2_e:-]\\x1B[0m}"           # Heading 2 end
export NOTEs="${taito_style_note_s:-\\x1B[95m}"       # Note start: Ligth blue background
export NOTEe="${taito_style_note_e:-\\x1B[0m}"        # Note end

export taito_command_context_prefix=
if [[ ${taito_command_context:-} ]]; then
  taito_command_context_prefix="${H1Ps}${taito_command_context}${H1Pe} "
fi

# Concatenate all secrets
if [[ ${taito_env} == "local" ]]; then
  export taito_secrets="${taito_secrets} ${taito_local_secrets:-}"
fi
if [[ ${taito_env} != "local" ]]; then
  export taito_secrets="${taito_secrets} ${taito_remote_secrets:-}"
fi

# Determine branch
branch="${taito_env}"
if [[ ${branch} == "prod" ]]; then
  branch="master"
elif [[ ${branch} == "local" ]]; then
  branch=""
fi
export taito_branch="${branch}"

# Execute some additional check only once in a while
if (( RANDOM % 4 == 0 ))
   [[ ${taito_mode:-} != "ci" ]] && \
   [[ ${quiet} != "true" ]] && \
   [[ ${taito_command} != "__help" ]] && \
   [[ ${taito_command} != "readme" ]] && \
   [[ ${taito_command} != "trouble" ]] && \
   [[ ${taito_command} != "project-"* ]] && \
   [[ ${taito_command} != "env-apply" ]]; then
  if [[ ${taito_project:-} != *"-template" ]] && \
     [[ $(grep "\\* \\[ \\] All done" CONFIGURATION.md 2> /dev/null || :) != "" ]]; then
    echo
    echo "--------------------------------------------------------"
    echo "NOTE: This project has not yet been fully configured."
    echo "See the '[ ] All done' checkboxes in CONFIGURATION.md."
    echo "--------------------------------------------------------"
  fi
fi

# Validate args
if [[ " local ${taito_environments:-} " != *" ${taito_target_env} "* ]]; then
  echo
  echo "ERROR: Unknown environment '${taito_target_env}'"
  echo "Valid environments: local ${taito_environments}"
  exit 1
fi
if [[ " local ${taito_environments:-} " != *" ${taito_env} "* ]]; then
  echo
  echo "ERROR: Unknown environment '${taito_env}'"
  echo "Valid environments: local ${taito_environments}"
  exit 1
fi
if [[ ${taito_target} ]] && \
   [[ ${taito_mode:-} != "ci" ]] && \
   [[ "${taito_targets:-} root" != *"${taito_target}"* ]] && \
   [[ ${taito_build_targets:-} != *"${taito_target}"* ]]; then
  echo
  echo "ERROR: Unknown target '${taito_target}'"
  echo
  echo "Valid environments: local ${taito_environments}"
  echo "Valid targets: ${taito_targets}"
  echo "Valid build targets: ${taito_build_targets}"
  echo "Valid databases: $(taito::print_targets_of_type database)"
  exit 1
fi

# Select database configs using taito_target
taito::export_database_config

# Export storage configs using taito_target
taito::export_storage_config

# Read taito-secrets in case of CI/CD
if [[ -f "${taito_project_path:?}/tmp/secrets/taito-secrets" ]]; then
  # Taito secrets for CI/CD
  # shellcheck disable=SC1091
  . "${taito_project_path:?}/tmp/secrets/taito-secrets"
fi

# TODO ^^^^^ clean up code ^^^^^


# Validate env
if [[ ${taito_env} != "local" ]] && \
   [[ " ${taito_environments:-} " != *" ${taito_env} "* ]]; then
  echo
  echo "ERROR: '${taito_env}' not included in taito_environments: ${taito_environments:-}"
  exit 1
fi

# Validate auth operations
if [[ ${taito_command} == "auth" ]] && \
   [[ ${taito_env} == "local" ]] && \
   [[ ${taito_type:-} != "zone" ]]; then
  echo
  echo "ERROR: You cannot authenticate to local environment."
  echo "Specify environment: taito auth:ENV".
  exit 130
fi

# Validate env operations
if [[ ${taito_command} == "env-apply" ]] && [[ -z "${taito_domain:-}" ]] && \
   grep -q taito_domain taito-config.sh; then
  echo
  echo "ERROR: taito_domain has not been set for ${taito_target_env} environment."
  echo "Configure DNS and set taito_domain for ${taito_target_env} environment"
  echo "in taito-env-prod-config.sh. The default IP address for this zone is shown"
  echo "below. You can use it as IP address if unique IP address is not required."
  echo
  getent hosts "${taito_default_domain:-}" | awk '{ print $1 }'
  exit 130
fi

if [[ ${taito_command} == "env" ]] && [[ ${taito_env} == "local" ]]; then
  echo "ERROR: You cannot use the 'local' env with the env command."
  exit 1
fi

# Validate old --upgrade
if [[ ${taito_command} == "__upgrade" ]]; then
  echo
  echo "NOTE: 'taito --upgrade' is no longer. Run 'taito upgrade'."
  exit 130
fi

# Validate old --auth
if [[ ${taito_command} == "__auth" ]]; then
  echo
  echo "NOTE: 'taito --auth' is no longer. Run 'taito auth:ENV'."
  exit 130
fi

# Validate vc operations
if [[ ${taito_command} == "vc-"* ]]; then
  echo
  echo "NOTE: 'taito vc' commands have been removed. See help:"
  echo "$ taito env -h"
  echo "$ taito feat -h"
  echo "$ taito commit -h"
  exit 130
fi

# Validate zone operations
if [[ ${taito_command} == "zone-"* ]] && \
   [[ ${taito_command} != "zone-create" ]] && \
   [[ ${taito_type:-} != "zone" ]]; then
  echo
  echo "ERROR: You can run zone commands only inside a zone directory."
  exit 130
fi

# Confirm zone operations
if [[ ${taito_command} == "zone-"* ]] && \
   [[ ${taito_command} != "zone-create" ]] && \
   [[ ${taito_command} != "zone-status" ]] && \
   [[ ${quiet} != "true" ]]; then
  echo
  echo "The operation is targetting zone ${taito_zone:-}."
  taito::confirm
fi

# Confirm prod operations
if ( [[ ${taito_env} == "prod" ]] || [[ ${taito_dest_env} == "prod" ]] ) && \
   [[ ${taito_command} != "info" ]] && \
   [[ ${taito_command} != "status" ]] && \
   [[ ${taito_command} != "logs" ]] && \
   [[ ${taito_command} != "open-"* ]] && \
   [[ ${taito_mode:-} != "ci" ]] && \
   [[ ${quiet} != "true" ]]; then
  echo
  echo "The operation is targetting prod environment of ${taito_project:-}."
  taito::confirm "Do you want to continue anyway?" no

  # Confirm suspicious operations
  if [[ ${taito_command} == "init" ]]; then
    echo
    echo "Command 'taito ${orig_command}' is not meant to be run on production environment."
    taito::confirm "Do you want to continue anyway?" no
  fi
fi

# Confirm env-apply and env-destroy admin privileges
if [[ ${taito_command} == "env-apply" ]] || \
   [[ ${taito_command} == "env-destroy" ]]; then
  if [[ $taito_target_env == "prod" ]] || \
     [[ $taito_target_env == "canary" ]] || \
     [[ $taito_target_env == "stag" ]]; then
    echo
    echo "Running 'taito ${taito_command//-/ }' on $taito_target_env environment most likely"
    echo "requires admin privileges. You may not be allowed to execute all operations."
    taito::confirm "Do you want to continue anyway?" no
  fi
fi

if [[ ${taito_command} == "env-merge" ]]; then
  # Parse arguments
  dest=""
  for param in ${params[@]}
  do
    if [[ ${param} != "-"* ]] && [[ ! ${dest} ]]; then
      dest=${param/prod/master}
    else
      echo "ERROR: Invalid parameter ${param}"
      exit 1
    fi
    shift || :
  done

  # Determine valid merges
  merges=""
  prev_env=""
  for env in ${taito_environments}
  do
    env="${env/prod/master}"
    if [[ ${env} != "feat"* ]]; then
      if [[ ${prev_env} ]]; then
        merges="${merges} ${prev_env}->${env} "
      fi
      prev_env="${env}"
    fi
  done

  # Determine source branch
  source="${taito_branch:-}"
  if [[ ! "${source}" ]]; then
    # use current git branch as source
    source=$(git symbolic-ref --short HEAD)
  fi

  # Determine destination branch
  if [[ ! ${dest} ]]; then
    dest=$(echo "${merges}" | sed "s/.*${source}->\([^[:space:]]*\).*/\1/")
  fi

  # Validate arguments
  if [[ ! "${merges}" =~ .*${source}-.*\>${dest}.* ]]; then
    echo "Merging from ${source} to ${dest} is not allowed."
    echo "Changes must be merged from one environment to another in this order:"
    echo "${taito_environments}"
    exit 1
  fi

  export taito_env_merge_source="${source}"
  export taito_env_merge_dest="${dest}"
  export taito_env_merges="${merges}"
fi

# Create environment variables for secrets
secret_index=0
export taito_secret_names=""
secret_exports=""
secrets=("${taito_secrets}")
for secret in ${secrets[@]}
do
  # NOTE: A quick fix to support the new naming convention in which
  # method is given as suffix, not prefix
  fix_suffix="${secret##*:}"
  fix_prefix="${secret%:*}"
  if [[ ${#fix_suffix} -lt ${#fix_prefix} ]]; then
    secret="${fix_suffix}:${fix_prefix}"
  fi

  # Create env var name by replacing illegal characters
  secret_suffix="${secret##*:}"
  secret_name="${secret_suffix%/*}"
  secret_method="${secret%:*}"
  if [[ ${secret_suffix} == *"/"* ]]; then
    secret_namespace="${secret_suffix##*/}"
  else
    secret_namespace="${taito_namespace:?}"
  fi
  taito_secret_names="${taito_secret_names} ${secret_name}"
  secret_exports="${secret_exports}export \
    secret_name_${secret_index}='${secret_name}'; "
  secret_exports="${secret_exports}export \
    secret_method_${secret_index}='${secret_method}'; "
  secret_exports="${secret_exports}export \
    secret_namespace_${secret_index}='${secret_namespace}'; "
  secret_index=$((${secret_index}+1))
done

eval "$secret_exports"

# Determine enabled plugins
enabled_plugins=""
plugins_string=$(echo "${taito_plugins:-} ${taito_global_plugins:-} basic " \
  | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}')
# Hack: move google-global to first because it modifies link urls
if [[ ${plugins_string} == *" google-global "* ]]; then
  plugins_string="google-global ${plugins_string/ google-global / }"
fi
plugins=("${plugins_string}")

# Find matching plugin commands and assemble chains
pre_handlers=()
post_handlers=()
commands=()
extensions=("${taito_enabled_extensions} ${taito_cli_path}/plugins")
# TODO plugin_path??
# commands=($(ls "${plugin_path}/${command}"[\#.]* 2> /dev/null || :))
for plugin in ${plugins[@]}
do
  # Check first if plugin is enabled for this environment:
  # e.g. docker:local kubectl:-local
  split=(${plugin//:/ })
  plugin_name=${split[0]}
  plugin_env=${split[1]}
  if [[ ${plugin_env} == "" ]] \
     || [[ ${plugin_env} == "${env}" ]] \
     || [[ ${plugin_env} == -* ]] && [[ ${plugin_env} != "-${env}" ]]; then
    # Plugin is enabled for this environment
    enabled_plugins="${enabled_plugins} ${plugin_name}"
    plugin_path=""
    for extension in ${extensions[@]}
    do
      if [[ -d ${extension}/${plugin_name} ]]; then
        plugin_path="${extension}/${plugin_name}"
        break
      fi
    done

    # Add pre/post handlers
    pre_handlers+=($(ls "${plugin_path}/hooks/pre"-?? 2> /dev/null || :))
    post_handlers+=($(ls "${plugin_path}/hooks/post"-?? 2> /dev/null || :))

    # Add matching commands to command chain
    commands+=($(ls "${plugin_path}/${command}"-?? 2> /dev/null || :))
  fi
done

concat_commands_only_chain=(
  $(echo "${commands[@]}" | taito::core::sort_commands_by_priority)
)

# Assemble the final taito command chain
concat_full_chain=(
  $(echo "${pre_handlers[@]}" | taito::core::sort_commands_by_priority)
  "${concat_commands_only_chain[@]}"
  $(echo "${post_handlers[@]}" | taito::core::sort_commands_by_priority)
)

# Export some variables to be used in command execution
export taito_command_chain="${concat_full_chain[@]}"
export taito_original_command_chain="${concat_full_chain[@]}"
export taito_commands_only_chain="${concat_commands_only_chain[@]}"
export taito_enabled_plugins="${enabled_plugins}"

if [[ ${taito_commands_only_chain:-} == *"-db/"* ]]; then
  export taito_command_requires_database="true"
else
  export taito_command_requires_database="false"
fi

export taito_command_requires_db_proxy="false"
if [[ ${taito_command_requires_database} == "true" ]] && (
     [[ ${taito_mode} != "ci" ]] ||
     [[ ${ci_disable_db_proxy:-} != "true" ]]
   ); then
  export taito_command_requires_db_proxy="true"
fi

export taito_command_requires_secrets
taito_command_requires_secrets="false"
if [[ ${taito_commands_only_chain:-} == *"-db/"* ]] || \
   [[ ${taito_command} == "db-proxy" ]] || \
   [[ ${taito_command} == "build-prepare" ]] || \
   [[ ${taito_command} == "build-release" ]] || \
   ( \
     [[ ${taito_command} == "test" ]] && \
     [[ "stag canary prod" != *"${taito_env}"* ]] \
   ); then
  taito_command_requires_secrets="true"
fi

export taito_tmp_secrets_dir="/tmp/secrets/${taito_project:-zone}/${taito_env:?}"
if [[ ${taito_command} == "test" ]]; then
  # Save secrets on project dir for running tests
  taito_tmp_secrets_dir="${taito_project_path:-zone}/tmp/secrets/${taito_env:?}"
fi

# TODO: ${taito_command_chain:-} == *"kube-secrets/"*
if [[ ${taito_commands_only_chain:-} == *"kubectl/"* ]] || \
   [[ ${taito_commands_only_chain:-} == *"helm/"* ]] || \
   ( \
     [[ ${taito_command_requires_secrets} == "true" ]] && \
     [[ ${taito_command_chain:-} == *"kubectl/"* ]] \
   ) || \
   ( \
     [[ ${kubernetes_db_proxy_enabled:-} == "true" ]] && \
     [[ ${taito_command_requires_database:-} == "true" ]] \
   ); then
  export taito_command_requires_kubernetes="true"
else
  export taito_command_requires_kubernetes="false"
fi

if [[ ${taito_commands_only_chain:-} == *"docker/"* ]]; then
  export taito_command_requires_container_registry="true"
else
  export taito_command_requires_container_registry="false"
fi

# Admin credentials pre-handling
if [[ ${taito_admin_key} ]]; then
  if [[ ${#taito_admin_key} -lt 16 ]]; then
    echo
    echo "ERROR: Encyption key must be at least 16 characters long"
    exit 1
  fi

  if [[ ! -f ~/admin_creds.enc ]] && [[ ${command} != "auth" ]]; then
    echo
    echo "ERROR: Admin credentials file missing. Authenticate as admin first."
    exit 1
  fi

  # Move normal user credentials elsewehere
  mv ~/.config ~/.config_normal
  mv ~/.kube ~/.kube_normal

  if [[ ${command} != "auth" ]]; then
    # Decrypt admin credentials
    # TODO use something else than openssl:
    # https://cryptosense.com/weak-key-derivation-in-openssl/
    if ! openssl aes-256-cbc -d -salt -in ~/admin_creds.enc \
      -out ~/admin_creds.tar.gz -pass env:taito_admin_key; then
      echo
      echo "ERROR: Decrypting admin credentials failed"
      exit 1
    fi
    (cd ~ && tar -xf admin_creds.tar.gz)
    rm -f ~/admin_creds.tar.gz
    echo
    echo "Decrypted admin credentials"
    echo "---------------- ADMIN START ----------------"
    echo
  fi

  # Hide admin key from plugins
  taito_admin_key_orig="${taito_admin_key}"
  export taito_admin_key="-"
  export taito_is_admin=true
fi

# Harcoded command handling
if [[ ${command} == "hours-add" ]] || [[ ${command} == "hours-stop" ]]; then
  export taito_hours_description
  if [[ ${command} == "hours-add" ]]; then
    taito_hours_description="${params[@]:2}"
  else
    taito_hours_description="${params[@]}"
  fi
  while [[ ! "${taito_hours_description}" ]]; do
    echo
    echo "Enter hour entry description:"
    read -r taito_hours_description
  done
fi

# Execute command
exit_code=0
if [[ ${command} == "shell" ]] && \
   [[ -z ${taito_target} ]] && \
   [[ ${taito_env} == "local" ]]; then
  # Start interactive shell
  /bin/bash
  exit_code=${?}
elif [[ ${command} == "__" ]]; then
  # Execute shell command given as argument
  echo
  eval "${params[@]}"
  exit_code=${?}
else
  # Print some additional info in debug mode
  if [[ ${debug} == true ]]; then
    echo
    echo "TAITO CLI: Executing on ${taito_namespace:-} environment:"
    echo -e "${taito_command_chain// /\\n}"
  fi

  # Execute taito-cli command chain
  taito::execute_with_ssh_agent "taito::call_next" "${params[@]}"
  # "${taito_util_path}/call-next" "${params[@]}"
  exit_code=${?}
  if [[ ${exit_code} == 130 ]]; then
    echo "Cancelled"
  elif [[ ${exit_code} -gt 0 ]]; then
    echo "ERROR! Command failed."
  fi
fi

# Admin credentials post-handling (just in case)
# NOTE: In case of auth command this was already run before docker commit
if [[ ${taito_admin_key_orig} ]] && [[ ${command} != "auth" ]]; then
  # Delete admin credentials
  rm -rf ~/.config ~/.kube
  # Move normal user credentials back
  mv ~/.config_normal ~/.config
  mv ~/.kube_normal ~/.kube
  echo
  echo "---------------- ADMIN END ----------------"
  echo "Normal user credentials restored"
fi

exit ${exit_code}
