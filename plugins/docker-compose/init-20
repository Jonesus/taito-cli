#!/bin/bash -e
# shellcheck source=lib/all.bash
. "${taito_plugin_path:?}/lib/all.bash"

(
  options=" ${*} "
  database_hosts=$(taito::get_database_hosts $taito_target)
  num_databases=$(wc -w <<< "$taito_databases")

  echo num_databases $num_databases

  if [[ ${database_hosts} ]] && [[ ${taito_env:?} == "local" ]]; then
    # Delete containers only if there is max one database
    if [[ ${options} == *" --clean "* ]] && [[ $num_databases -eq 1 ]]; then
      echo "Cleaning database container(s)"

      for host in ${database_hosts[@]}; do
        # TODO: duplicate code with clean
        taito_target=$host
        docker-compose::expose_pod_and_container

        # Docker-compose uses directory name as image prefix by default
        dir_name="${taito_host_project_path:-/taito-cli}"
        # Leave only directory name
        dir_name="${dir_name##*/}"

        compose_file=$(docker-compose::prepare_docker_compose_yaml false)
        taito::execute_on_host "
          docker-compose -f $compose_file stop ${pod:?}
          docker-compose -f $compose_file rm --force ${pod:?}
          docker-compose -f $compose_file up --force-recreate --build --no-start ${pod:?}
          docker-compose -f $compose_file start ${pod:?}
        "
      done

      sleep 15
      echo "Waiting for databases to start..."
      sleep 25
      echo "Done waiting"

    elif [[ ${taito_command_root_context} != "init" ]]; then
      # Running init during another command execution (e.g. start) -> add some sleep
      echo "Waiting for databases to start..."
      sleep 15
      echo "Done waiting"
    else
      echo "Not cleaning database containers"
    fi
  fi
)

taito::call_next "${@}"
