#!/bin/bash -e
# shellcheck source=lib/all.bash
. "${taito_plugin_path:?}/lib/all.bash"

taito::confirm "Warning! This command is work in progress and it is using hardcoded paramters. Do you really want to continue" no || taito::skip_to_next "${@}"

kubernetes_params=""
args=( "$@"  )
while [ $# -gt 0 ]
do
  case $1 in
    --all-namespaces)
      kubernetes_params="--all-namespaces"
      shift || :
      ;;
  esac
done

kubectl::use_context

# TODO: give secret type, issuers, etc as parameters
secrets=("$(
  kubectl get secret ${kubernetes_params} --field-selector type=kubernetes.io/tls \
    -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace,ISSUER:.metadata.annotations.'cert-manager\.io/issuer-name',ISSUER2:.metadata.annotations.'certmanager\.k8s\.io/issuer-name' | \
    grep "letsencrypt-issuer" | \
    awk '{print $1 ":" $2;}')"
)
for secret in ${secrets[@]}; do
  name="${secret%:*}"
  namespace="${secret##*:}"
  if taito::confirm "Delete secret ${name} from namespace ${namespace}" no; then
    (
      mkdir -p tmp
      backup_filepath="tmp/${namespace}.${name}"
      echo "Saving secret backup to ${backup_filepath}"
      taito::executing_start
      kubectl get secret "${name}" --namespace "${namespace}" -o yaml > "${backup_filepath}"
      kubectl delete secret "${name}" --namespace "${namespace}"
    )
    sleep 3
    kubectl get secret "${name}" --namespace "${namespace}"
  fi
done

taito::call_next "${args[@]}"
