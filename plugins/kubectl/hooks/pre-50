#!/bin/bash -e
# shellcheck source=../lib/all.bash
. "${taito_plugin_path:?}/lib/all.bash"
: "${taito_command:?}"
: "${taito_env:?}"
: "${taito_mode:?}"

# Reset Kubernetes settings
if [[ ${taito_command} == "auth" ]] && (
     [[ " ${*} " == *" --reset "* ]] || [[ " ${*} " == *" reset "* ]]
   ); then
  taito::print_plugin_title
  rm -rf ~/.kube/* &> /dev/null
  echo "Removed Kubernetes settings from ~/.kube"
fi

# Ensure namespace exists
if [[ ${taito_command} == "env-apply" ]]; then
  taito::print_plugin_title
  echo "Ensuring Kubernetes namespace exists: ${taito_namespace:?}"
  kubectl::use_context
  kubectl::ensure_namespace "${taito_namespace}"
  kubectl::use_context
fi

# Start database proxy
if [[ ${kubernetes_db_proxy_enabled:-} == "true" ]] && \
   [[ ${taito_command_requires_db_proxy:-} == "true" ]]; then
  proxy_running=$(pgrep "kubectl") || :
  taito::print_plugin_title
  if [[ ${proxy_running} == "" ]]; then
    echo "Starting db proxy"
    kubectl::use_context
    kubectl::db_proxy_start true
  else
    echo "Not Starting db proxy. It is already running."
  fi
fi

# Fetch required secrets from Kubernetes
taito::expose_required_secrets_filter true
if [[ ${fetch_secrets:?} == "true" ]]; then
  taito::print_plugin_title
  echo "Getting secrets from Kubernetes (${taito_env}) for ${secret_purpose:?}"

  kubectl::use_context
  taito::export_secrets \
    kubectl::get_secret_value \
    "${save_secrets_to_disk:-}" \
    "${secret_filter}"

  export taito_secrets_retrieved=true
fi

# Save database proxy secret to disk for running tests
if [[ ${taito_command} == "test" ]] && [[ ${taito_mode} == "ci" ]]; then
  taito::save_proxy_secret_to_disk kubectl::get_secret_value
fi

taito::call_next "${@}"
