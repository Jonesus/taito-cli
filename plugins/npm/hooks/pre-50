#!/bin/bash -e
: "${taito_skip_override:?}"
: "${taito_command:?}"
: "${taito_env:?}"
: "${taito_vout:?}"
: "${taito_dout:?}"

export taito_hook_command_executed=${taito_hook_command_executed}

exit_code=0
skip_remaining_commands=false

# EXAMPLE: taito test:server:dev --option1 --option2 suite user
# - taito_command = "test"
# - target = ":server"
# - taito_env = "dev"
# - options = ":option1:option2"
# - params = " -- suite user"

target=""
if [[ ${taito_target:-} ]]; then
  target=":${taito_target}"
fi

options=""
params=""
for arg
do
  if [[ "$arg" == "--"* ]] && [[ -z "${params}" ]]; then
    options="${options}:${arg#--}"
  elif [[ -z "${params}" ]]; then
    params=" -- ${arg}"
  else
    params="${params} ${arg}"
  fi
done

echo "command: ${taito_command}" > ${taito_dout}
echo "env: ${taito_env}" > ${taito_dout}
echo "target suffix: ${target}" > ${taito_dout}
echo "options suffix: ${options}" > ${taito_dout}
echo "params suffix: ${params}" > ${taito_dout}

if [[ -f "./package.json" ]] || [[ ${taito_testing:-} ]]; then
  # Read command names from package.json
  # TODO: why npm run fails on taito calls taito?
  # commands=$(npm run | grep '^  [^ ]*$' | sed -e 's/ //g')
  commands=$(set +e; npm run 2> /dev/null | grep '^  [^ ]*$' | sed -e 's/ //g')

  # TODO refactor: this is awful!
  if [[ ${taito_skip_override} == false ]] && \
     [[ $(echo "${commands}" | grep "^taito-${taito_command}${target}:${taito_env}${options}$") != "" ]]; then
    # Use overriding command from package.json
    taitonpm_command="taito-${taito_command}${target}:${taito_env}${options}"
    skip_remaining_commands=true
  elif [[ ${taito_skip_override} == false ]] && \
     [[ $(echo "${commands}" | grep "^taito-${taito_command}${target}${options}$") != "" ]]; then
    # Use overriding command from package.json without enviroment target
    taitonpm_command="taito-${taito_command}${target}${options}"
    skip_remaining_commands=true
  elif [[ ${taito_skip_override} == false ]] && \
     [[ $(echo "${commands}" | grep "^taito-host-${taito_command}${target}:${taito_env}${options}$") != "" ]]; then
    # Use overriding command from package.json
    taitonpm_command="taito-host-${taito_command}${target}:${taito_env}${options}"
    skip_remaining_commands=true
    run_on_host=true
  elif [[ ${taito_skip_override} == false ]] && \
     [[ $(echo "${commands}" | grep "^taito-host-${taito_command}${target}${options}$") != "" ]]; then
    # Use overriding command from package.json without enviroment target
    taitonpm_command="taito-host-${taito_command}${target}${options}"
    skip_remaining_commands=true
    run_on_host=true
  elif [[ $(echo "${commands}" | grep "^${taito_command}${target}:${taito_env}${options}$") != "" ]]; then
    # Use normal command from package.json
    taitonpm_command="${taito_command}${target}:${taito_env}${options}"
  elif [[ $(echo "${commands}" | grep "^${taito_command}${target}${options}$") != "" ]]; then
    # Use normal command from package.json without enviroment target
    taitonpm_command="${taito_command}${target}${options}"
  fi

  npmopts="-s"

  # taito test prehandling

  # TODO: 'taitonpm_command == test' and 'taitonpm_command == taito-test' can be removed?
  running_ci_test="false"
  if [[ ${taito_mode:-} == "ci" ]] && \
     ( \
       [[ ${taito_command} == "test" ]] || \
       [[ ${taitonpm_command} == "test" ]] || \
       [[ ${taitonpm_command%%:*} == "test" ]] || \
       [[ ${taitonpm_command%%:*} == "taito-test" ]] \
     ); then
    running_ci_test="true"

    # TODO: can we avoid using --unsafe-perm?
    if [[Â $(whoami) == "root" ]]; then
      npmopts="${npmopts} --unsafe-perm"
    fi
  fi

  # TODO: should be in taito-cli core only?
  if [[ ${running_ci_test} == "true" ]] && [[ ${ci_exec_test:-} != "true" ]]; then
    echo "Skipping test because ci_exec_test != true"
    taitonpm_command=""
    running_ci_test=false
    taito_hook_command_executed=true
  fi

  if [[ ${taito_command} == "build-release"* ]] || \
     [[ ${taito_command} == "artifact-release"* ]]; then
    # TODO: remove this artifact-release skip hack
    taitonpm_command=""
  fi

  # run npm command

  if [[ ${taito_debug:-} == "true" ]]; then
    echo "taito_mode: ${taito_mode:-}"
    echo "taito_command: ${taito_command}"
    echo "taitonpm_command: ${taito_command}"
  fi

  if [[ ${taitonpm_command} != "" ]]; then
    # Run it
    taito::print_plugin_title
    echo "Running script '${taitonpm_command}${params}'"
    # NOTE: Intentionally removed parameter support: -- "${@}"
    # NOTE: All libs are installed using 'npm install' run on directly on host.
    #       Perhaps some npm scripts should also be run on host to avoid
    #       compatibilty issues.
    taito_hook_command_executed=true
    if [[ ${run_on_host} == "true" ]]; then
      taito::execute_on_host_fg "
        export taito_command_root_context='${taito_command_root_context}'
        export taito_command_context='npm ${taitonpm_command}'
        npm run ${npmopts} ${taitonpm_command}${params}
      "
      exit_code=0
    else
      (
        export taito_command_root_context="${taito_command_root_context}"
        export taito_command_context="npm ${taitonpm_command}"
        taito::executing_start
        npm run ${npmopts} ${taitonpm_command}${params}
      )
      exit_code=$?
    fi
  fi

  # taito test posthandling

  if [[ ${running_ci_test} == true ]] && [[ ${exit_code} != 0 ]]; then
    # Notify verify step so that it can revert the changes
    # TODO move this to src/execute-command
    cat "failed" > ./taitoflag_test_failed
  fi
fi

if [[ ${exit_code} != 0 ]]; then
  exit ${exit_code}
elif [[ ${skip_remaining_commands} == false ]]; then
  taito::call_next "${@}"
fi
