#!/bin/bash -e
# shellcheck source=../kubectl/lib/context.bash
. "${taito_plugin_path:?}/../kubectl/lib/context.bash"

name=${1}

kubectl::use_context

# TODO: Already stopped on gcp?
# if taito::confirm "kubectl-dashboard" "${name}" \
#   "Stop dashboard of Kubernetes as it is not needed in most cloud setups"
# then
#   kubectl scale --replicas=0 --namespace kube-system deployment/kubernetes-dashboard || :
#   echo "NOTE: It's ok if this failed to 'not found' error."
#   echo
# fi

# TODO: Only needed if database manager and github token are saved on Kubernetes.
# But extra namespace does not matter either.
# if taito::confirm "kubectl-devops-namespace" "${name}" \
#   "Create 'devops' namespace on Kubernetes"
# then
#   kubectl::ensure_namespace devops
# fi

# if taito::confirm "kubectl-cloudsql-secret" "${name}" \
#   "Create service acccount for Cloud SQL access and save it to devops namespace"
# then
#   echo
#   echo "Service account for database access:"
#   echo
#   echo "Create a service account with role 'Cloud SQL Client' and save the"
#   echo "service account JSON key to file './tmp/cloudsql.json'."
#   echo "The service account will be used to access database from Kubernetes."
#   echo "You can delete the JSON file afterwards."
#   # TODO open gcp console
#   echo "Press enter after you have saved the file."
#   read -r
#   kubectl create secret generic "cloudsql-gserviceaccount" --namespace=devops \
#     --from-file=key="tmp/cloudsql.json"
# fi

# TODO: GitHub token handling should be implemented somewhere else, but might be
# needed on Kubernetes for some setups.
# if taito::confirm "kubectl-github-secret" "${name}" \
#   "ONLY FOR PRODUCTION CLUSTER: Save GitHub token to devops namespace for tagging releases"
# then
#   echo
#   echo "GitHub token for tagging releases:"
#   echo
#   echo "Save your personal GitHub token to file './tmp/github'."
#   echo "It will be used for tagging git releases. You can delete the file afterwards."
#   echo "Press enter after you have saved the file."
#   read -r
#   kubectl create secret generic "version-control-buildbot" --namespace=devops \
#     --from-file=token=tmp/github
# fi

taito::confirm "Configure DNS" || \
  taito::skip_to_next "${@}"

taito::print_title "LOAD BALANCER ADDRESSES"
lb_ips="$(kubectl get services -o=custom-columns=LOAD_BALANCER_IP:.status.loadBalancer.ingress[0].ip,LOAD_BALANCER_AP:.status.loadBalancer.ingress[0].hostname \
  --no-headers --all-namespaces 2> /dev/null | grep -v "<none>.*<none>" | sed s/\\s*\<none\>\\s*//g)"
if [[ ${lb_ips} ]]; then
  echo "${lb_ips}"
  echo
  echo "Your load balancer addresses are presented above. You should configure"
  echo "DNS for them, and also set 'taito_default_domain' in taito-config.sh,"
  echo "if you have not done so already. Example DNS entry:"
  echo
  if [[ ${#lb_ips} -ge 20 ]]; then
    echo "  CNAME  *.${taito_default_domain:-mydomain.com}  ->  ${lb_ips}"
  else
    echo "      A  *.${taito_default_domain:-mydomain.com}  ->  ${lb_ips}"
  fi
  echo
  echo "Press enter once you have configured DNS."
  read -r
else
  echo "Your Kubernetes cluster does not seem to contain any load balancer IP"
  echo "addresses. If you already installed the ingress controller a moment ago,"
  echo "wait for a couple of minutes and then run 'taito zone status' to see if"
  echo "your Kubernetes cluster has received a load balancer IP. Then configure"
  echo "DNS for the load balancer IP according to instructions given by"
  echo "'taito zone status' )"
  echo
  echo "Press enter to continue"
  read -r
fi

taito::call_next "${@}"
