TAITO-CLI
---------

QUICK EXAMPLES

  LOCAL DEVELOPMENT
    taito install            # Install some libraries on host
    taito start              # Start containers
    taito init               # Initialize database and storage buckets
    taito open app           # Open application on browser
    taito open admin         # Open admin GUI on browser
    taito open kanban        # Open project kanban board on browser
    taito info               # Show info required for logging in to app
    taito unit               # Run unit tests
    taito test               # Run integration and e2e tests
    taito db open            # Access database from command line
    taito db add: role_enum  # Add a database migration
    taito shell: server      # Start shell inside a container named 'server'

  REMOTE ENVIRONMENT ACCESS
    taito open app:dev       # Open application on browser
    taito open admin:dev     # Open application admin GUI on browser
    taito info:dev           # Show information required for signing in
    taito status:dev         # Show application status
    taito test:dev           # Run integration/e2e tests against dev env
    taito shell:dev server   # Start a shell on a container named 'server'
    taito logs:dev worker    # Tail logs of a container named 'worker'
    taito open logs:dev      # Open logs on browser (e.g. Stackdriver or ELK)
    taito open storage:dev   # Open storage bucket on browser
    taito init:dev --clean   # Reinitialize database and storage
    taito db open:dev        # Open database on command line
    taito db proxy:dev       # Start a database proxy for a GUI tool access
    taito db import:dev ./database/file.sql   # Import a file to database
    taito db dump:dev ./tmp/dump.sql          # Dump database to a file

  VERSION CONTROL
    taito vcs feat list      # List all feature branches
    taito vcs feat: pricing  # Switch to the pricing feature branch
    taito vcs feat merge     # Merge the current feature branch to the original
    taito vcs env list       # List all environment branches
    taito vcs env:dev        # Switch to the dev environment branch
    taito vcs env merge:test # Merge the current env branch to the test branch

SYNTAX ALTERNATIVES

  SPACE SYNTAX
    taito workspace clean
    taito open app:dev
    taito logs:dev client
    taito git feat squash: myfeature

  HYPHEN SYNTAX
    taito workspace-clean
    taito open-app:dev
    taito logs:dev client
    taito git-feat-squash myfeature

  > When using the space syntax, you must add an environment definition or
  > use plain ':' to separate the command from arguments. Examples:
  > $ taito logs:dev client
  > $ taito git feat squash: myfeature
  > NOTE: Autocomplete does not support the space syntax yet.

  > You should always use the internal hyphen syntax when defining build
  > targets (e.g. npm scripts) as some build tools do not support spaces in
  > build target names.

OPTIONS

  --help, -h
    Show help.txt of current project and a list of all taito-cli commands.
    Run 'taito COMMAND -h' to get help for a specific command or
    'taito PREFIX -h' to get help for a specific set of commands.

  --search, -s
    Same as '--help' but executes a wider search by including also command
    descriptions in search.
    TODO implement

  --trouble
    Show trouble.txt of current project and taito-cli.

  --readme
    Show README.md of current project and taito-cli.

  --upgrade
    Upgrade taito-cli and its extensions to the latest version.

  --upgrade-deps
    Upgrade tools bundled inside the current taito-cli docker container to the
    latest version. This option can be useful if you need to use an old version
    of taito-cli container image, but require tools to be upgraded.
    TODO implement

  --auth:ENV
    Authenticate in the context of the given environment.

  --dev, -d
    Run in development mode. In the development mode your local taito-cli
    directory is mounted on the container.
    TODO always pass on -d switch when running another taito command

  --
    Execute any command inside the taito-cli container. Example:
    taito -- kubectl get pods

  --shell
    Start interactive shell on the taito-cli container.

  --admin, -a
    Execute as admin.

  --project PROJECT, -p PROJECT
    Execute command in the context of given project. This command allows
    you to execute a taito-cli command without cloning the project repository
    to your local disk. Examples:
      taito -p my-project open app:dev
      taito -p org@another-project open info:prod
      TODO implement

  --verbose, -v
    Show commands that plugins execute.

  --quiet, -q
    Quiet info logging.
    TODO implement

  -c
    Informs taito-cli that the command is continuing from a previous command
    execution and therefore the license should not be shown again.

  -z
    Skip taito command overrides.

ARGUMENTS

  ENV
    Environment: 'local', 'feature', 'dev', 'test', 'staging' or 'prod'.
    Environment is 'local' by default. For mobile projects ENV can also be
    'ios' or 'android'.

  POD
    Depending on the environment, POD may reference to a Kubernetes pod,
    a Docker container, a function or some other deployable module.

PROJECT: BASIC OPERATIONS

  > All basic operation commands use 'oper' as a command grouping prefix but
  > you can leave it out if you like.

  install [--clean] [--all]
    Install everything that needs to installed locally on host (e.g. libraries
    for linting and autocompletion purposes). Use the '--clean' flag to execute
    a clean install. Use the '--all' flag to request for a full install in case
    you need all libraries to be installed on host for autocompletion, etc.
    TIP: Enable the 'make', 'npm' or 'pipenv' plugin.

  env
    Initialize the development environment. This command is for non-dockerized
    projects that require project specific environment variables to be set.
    For example the 'pipenv' plugin uses this command to initialize the python
    virtualenv.

  build
    Builds a project. This command is for non-dockerized projects that need to
    be compiled or built before application can be started.
    TIP: Enable the 'make' plugin and implement the script in your makefile.

  start[:ENV] [--clean] [--prod] [POD] [-- ARGS]
    Starts the defined environment e.g 'taito start' or 'taito start:dev'.
    Optional arguments for local environment:
    .
    --clean: Clean everything before start.
    --prod: Run production build instead of development build.
    POD: Start only the given pod/container/function/module/program
    -- ARGS: Additional arguments

  run:ENV [--no-deps] [-d,--device] [POD] [-- ARGS]
    Runs the application in the defined environment e.g 'taito run:ios'.
    Optional arguments for running in local environment:
    .
    -d,--device: Run on a real device instead of emulator.
    --no-deps: TODO Do not run dependencies (e.g linked services)
    POD: Run only the given pod/container/function/module/program
    -- ARGS: Additional arguments

  init[:ENV] [--clean]
    Make sure that everything has been initialized after start (database, etc.).
    Use the '--clean' flag to delete all existing data before init.

  stop[:ENV]
    Stop. Stops the application in the defined environment e.g 'taito stop'
    or 'taito stop:dev'.

  info[:ENV]
    Show some useful information about the environment (e.g. shared user
    accounts that you can use to log in).
    TIP: Enable the 'make' or 'npm' plugin and implement oper-info[:ENV] script
    in your makefile/package.json.

  unit [CONTAINER]
    Run unit tests.
    TIP: Enable the 'make' or 'npm' plugin and implement unit script in your
    makefile/package.json.

  test[:ENV] [CONTAINER] [SUITE]
    Run integration and end-to-end tests.
    TIP: Enable the 'make' or 'npm' plugin and implement test scripts in your
    makefile/package.json using the `taito `. You can configure test users and
    passwords for each environment in taito-config.sh as those settings are
    available to your script as environment variables. At least implement tests
    for dev environment.

  analyze
    Analyzes implementation and gives you feedback accordingly (webpack
    bundle analysis, code quality analysis, vulnerability analysis, etc.)
    TIP: Enable the 'make' or 'npm' plugin and implement oper-analyze script
    in your makefile/package.json

  scan
    Lint code, scan for vulnerabilities, etc.
    TIP: Enable the 'make' or 'npm' plugin and implement cscan script in your
    makefile/package.json.

  docs
    Generate docs e.g. API docs from API definitions and PDF files from
    markdown documentation.
    TIP: Enable the 'make' or 'npm' plugin and implement docs script in your
    makefile/package.json.

  secrets[:ENV]
    Retrieves all secrets that might be needed by a developer or CI/CD build.

  status[:ENV]
    Show status summary of environment (status of services, pods, etc.).

  logs[:ENV] POD [CONTAINER]
    Follow logs of a pod. Examples:
    $ taito logs: client
    $ taito logs:dev client
    $ taito logs:dev my-app-client-3034393823-2f5jf

  shell[:ENV] [POD] [CONTAINER]
    Start a shell on a pod. Examples:
    $ taito shell: client
    $ taito shell:dev client
    $ taito shell:dev my-app-client-3034393823-2f5jf

  exec[:ENV] POD CONTAINER COMMAND
    Execute command in pod. Run 'taito status[:ENV]' first to get the pod name
    and status. Give - as container if it should be determined automatically.
    Examples:
    $ taito exec: client - echo "taito!"
    $ taito exec:dev client - echo "taito!"
    $ taito exec:dev my-app-client-3034393823-2f5jf - echo "taito!"

  cp[:ENV] [POD:]path [POD:]path
    Copy a file. Examples:
    $ taito cp: foo.txt client:/client/foo.txt
    $ taito cp:dev foo.txt client:/client/foo.txt
    $ taito cp:dev client:/client/foo.txt .
    TODO IMPLEMENT

  kill[:ENV] [POD]
    Kill a pod. Examples:
    $ taito kill: client
    $ taito kill:dev client
    $ taito kill:dev my-app-client-3034393823-2f5jf

  clean [POD | npm | data | build | ...]
    Clean.

  lock
    Creates lock files that lock library versions.

PROJECT: LINKS

  > You can specify project specific browser links with the links plugin.
  > Here are some recommended link names that are also included in the
  > taito-cli autocomplete scripts:
  >
  > open app[:ENV] - GUI of app
  > open admin[:ENV] - GUI of application admin tool
  > open storage - Storage bucket used by the app
  > open docs - Built docs
  > open project - Project management
  > open git - Git repository (e.g. GitHub)
  > open vcs - Version control repository (e.g. GitHub)
  > open builds - List of builds (e.g. Jenkins, Google container builder)
  > open artifacts - Build artifacts
  > open reports - CI/CD reports (e.g. testing and code analysis)
  > open errors:ENV - Error Tracking (e.g. Sentry)
  > open logs:ENV - Logs (e.g. Stackdriver)
  > open uptime - Uptime monitoring (e.g. Stackdriver)
  > open performance - Performace monitoring (e.g. New Relic)
  > open feedback - User feedback management
  > open analytics - Usage analytics (e.g. Google Analytics)

GLOBAL: WORKSPACE OPERATIONS

  workspace clean
    Clean your workspace e.g. by deleting all docker container images and
    volumes that you haven't used for a while.

  workspace kill
    Kill all running processes (e.g. kill all docker processes to free reserved
    ports).

PROJECT: VERSION CONTROL OPERATIONS

  vcs env list
  git env list
    List all environment branches.

  vcs env:ENV [SOURCE_BRANCH]
  git env:ENV [SOURCE_BRANCH]
    Creates a new environment branch or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default source
    branch.

  vcs env merge:ENV [SOURCE_BRANCH]
  git env merge:ENV [SOURCE_BRANCH]
    Merges source env branch to target env branch without making changes
    to the current local git workspace. Current branch is used as a default
    source branch. The command fails if fast-forward is not possible. Merge
    operations between environment branches should always be fast-forwarded so
    that a container is first built for dev environment and then the same
    container is deployed to other environments as well once environment
    branches are merged.

  vcs feat list
  git feat list
    List all feature branches.

  vcs feat[:ENV] FEATURE_NAME
  git feat[:ENV] FEATURE_NAME
    Creates a new branch for a feature or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default env branch
    (source branch).

  vcs feat rebase[:ENV] [FEATURE_NAME]
  git feat rebase[:ENV] [FEATURE_NAME]
    Rebases a feature branch. The dev branch is used as a default env branch
    that the feature branch is rebased with.

  vcs feat squash[:ENV] [FEATURE_NAME]
  git feat squash[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch as a single squashed commit and
    deletes the feature branch. The dev branch is used as a default env
    branch (destination for merge). Use this command for a short-lived feature
    branch with a cohesive set of changes.

  vcs feat merge[:ENV] [FEATURE_NAME]
  git feat merge[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch. The dev branch is used as a
    default env branch (destination for merge). The command suggests rebase
    before merge and delete feature after merge. With rebase you can clean up
    commit history before merge e.g. by reordering commits and selectively
    squashing some of them together.

  vcs feat pr[:ENV] [FEATURE_NAME]
  git feat pr[:ENV] [FEATURE_NAME]
    Creates a pull request for a feature. The dev branch is used as a default
    env branch (destination for merge). The command suggests rebase before
    making the pull request. With rebase you can clean up commit history by
    reordering commits and selectively squashing some of them together.

PROJECT: DATABASE OPERATIONS

  db add: NAME [-r REQUIRES] [-n DESCRIPTION]
    Add a new change to migration plan. Run 'db add' without arguments to get
    help. You can run the change to local database by running `taito db:deploy`.
    Example: 'taito db add order.table -r user.table -n 'Table for orders.'

  db proxy[:ENV]
    Starts a proxy for accessing a database and shows connections details that
    you should use with your database GUI tool to connect the database. If
    proxy is not required, the command shows connection details nevertheless.
    If you don't have a personal account for the database, you can get a
    working username and password by running `taito oper secrets:ENV`. Note that
    passwords are rotated once in a while, thus, if you get an authentication
    error, retrieve new secrets by running `taito oper secrets:ENV` again.

  db open[:ENV] [USERNAME]
    Access database from command line. DB proxy connection and secrets are
    handled automatically. NOTE: If you want to access database using a GUI
    tool, use the db proxy:ENV command instead.

  db dump[:ENV] FILE
    Take a database dump. DB proxy connection and secrets are handled
    automatically.

  db import:[ENV] FILE
    Import a file to database. DB proxy connection and secrets are
    handled automatically. Always give file path relative to the project root.
    Example: taito db import:dev ./database/my-file.sql

  db deploy[:ENV]
    Deploy changes to database. DB proxy connection and secrets are handled
    automatically.

  db diff:[ENV] [OTHER_ENV]
    Compare database schemas of two environments. DB proxy connection and
    secrets are handled automatically. TODO implement.

  db log[:ENV]
    View change log of database. DB proxy connection and secrets are handled
    automatically.

  db revert:[ENV] [CHANGE]
    Rebases database by running 'db revert' and then 'db deploy'. DB proxy
    connection and secrets are handled automatically. The command reverts all
    changes by default. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`.

  db revert:[ENV] [CHANGE]
    Revert database changes. DB proxy connection and secrets are
    handled automatically. Revert the previous migration batch by running
    `taito db revert[:ENV]`. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`. TODO currently always requires CHANGE
    param.

  db recreate[:ENV]
    Recreates the database. Thus on next deployment, all database migrations
    will be run from the beginning. DB proxy connection and secrets are handled
    automatically.

  db copy:ENV SOURCE_ENV
    Copy database from one environment to another. For example
    `db copy:staging prod` or `db copy:local dev`. If you do not have enough
    rights, ask devops personnel to do this for you. DB proxy connection and
    secrets are handled automatically.

  db copyquick:ENV SOURCE_ENV
    Copy database quickly from one environent to another. DB proxy connection
    and secrets are handled automatically. NOTE: The command requires
    that both databases are located on the same database cluster. The command
    might also do some quirky things to make copying quicker so it might not
    be safe to use it with a live production database.

PROJECT: MANUAL DEPLOYMENT OPERATIONS

  manual cancel:ENV [IGNORE_BUILD_ID]
    Cancel an ongoing build, but ignore the given build id.

  manual deploy:ENV TAG|COMMIT
    Deploys a prebuilt version to an environment. TODO implement

  manual build deploy:[ENV] NAME
    Build, push and deploy a container or some other deployable module to
    server. Use this when you need to quickly deploy manual changes to some
    environment. Example: taito manual build deploy:dev server

  manual revision[:ENV]
    Show current revision.

  manual revert[:ENV] [REVISION]
    Reverts application to another revision. Reverts to the previous version
    if revision has not been given as argument. You can see current revision
    number by running `taito manual revision[:ENV]`.

PROJECT: AUTOMATIC CI/CD OPERATIONS

  ci prepare
    Set ci flags by status check. The ci flags are used to control the following
    ci steps. For example if taitoflag_images_exist is set, many of the ci steps
    will be skipped since all images have already been built and tested
    by some previous CI build.

  ci build:[ENV] CONTAINER_NAME IMAGE_TAG [PROJECT_REPOSITORY]
    Builds image. Example: 'taito ci build:dev client test1'.

  ci push: CONTAINER_NAME IMAGE_TAG [PROJECT_REPOSITORY]
    Pushes image to image registry. Example: 'taito ci push:dev client test1'.

  ci deploy[:ENV] [IMAGE_TAG] [--dry-run]
    Deploy the application either by using IMAGE_TAG given as parameter or
    using the latest image found for the environment in question. Use dry-run
    switch to execute a dry run. Example: 'taito ci deploy:dev test1'.
    NOTE: Does not deploy database changes (TIP: 'taito db deploy[:ENV]')

  ci wait[:ENV]
    Waits until application has been succesfully deployed to server.
    For example polls the app url until version number changes to something
    else. This is used by CI/CD scripts to wait deployment before running the
    api and e2e tests.

  ci verify[:ENV]
    Verifies that everything went ok e.g. by checking test results. If something
    went wrong and autorevert is enabled for the environment, runs
    `taito db revert[:ENV]` and `taito manual revert[:ENV]`.

  ci publish
    Publishes build artifacts (e.g. docs, test reports) to a central location.

  ci release pre:ENV
  ci release post:ENV
    Release pre and post handling. These commands usually generate release notes
    automatically and tag the git repository with a new version number.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-release-pre:prod and
    ci-release-post:prod scripts in your makefile/package.json.

PROJECT: BASIC SETUP

  project apply
    Migrate project to the latest configuration.

  project destroy
    Destroy project.

  project docs
    Populate taito settings to project documentation (e.g. links)

  project contacts
    List of project contacts.
    TIP: Enable the 'make' or 'npm' plugin and implement project-contacts
    script in your makefile/package.json.

PROJECT: ENVIRONMENT SETUP

  env apply:ENV
    Migrate environment to the latest configuration.
    TODO: implement using terraform.

  env destroy:ENV
    Destroy an environment.

  env finalize:prod
    Finalize production environment by setting up DNS and monitoring.
    TODO: remove once implemented with terraform

  env rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

PROJECT: ALTERNATIVE ENVIRONMENT SETUP

  > An alternative environment uses the same database as the main environment,
  > but containers are built from an alternative branch. You can use alternative
  > environments for canary releases, A/B testing, etc.

  env alt apply:ENV
    Migrate environment to the latest configuration.
    TODO: implement using terraform.

  env alt destroy:ENV [NAME]
    Destroy alternative environment. TODO not implemented.

  env alt rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

ZONE

  zone apply
    Apply infrastructure changes to a zone.

  zone status
    Show status summary of a zone.

  zone doctor
    Analyze and repair a zone.

  zone maintenance
    Execute supervised maintenance tasks that need to be run periodically for
    a zone (e.g. upgrades, secret rotation, log reviews, access right reviews).

  zone destroy
    Destroy a zone.

GLOBAL: PASSWORDS

  passwd share
    Sets a one-time shared password that can be read only once using a
    magic link and will be removed automatically after a while if it has not
    been read at all.
    TODO implement.

  passwd list [-c COLLECTION] [NAME_FILTER]
    List secret names from commonly shared secrets.
    TODO implement.

  passwd get [-c COLLECTION] [NAME]
    Get password from a secret collection.
    TODO implement.

  passwd set [-c COLLECTION] [NAME]
    Save password to a secret collection. Takes a backup of the old secret
    if it exists.
    TODO implement.

  passwd rotate [-c COLLECTION] [NAME_FILTER]
    An interactive command for rotating passwords of a collection one by one.
    TODO implement.

GLOBAL: UTILS

  util browser: URL
    Opens the given url in default web browser. You can use this command in
    your build scripts.

  util commit
    Commits current changes to the taito-cli container. For example, you
    can start a shell running 'taito --shell', make some changes and then
    commit all changes by running 'taito util-commit' inside the container.

  util test: POD [SUITE_FILTER]
    Run test suites for the given POD.
