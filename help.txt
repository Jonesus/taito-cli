TAITO-CLI
---------

QUICK EXAMPLES

  LOCAL DEVELOPMENT
    install                  # Install libraries on host
    (link)                   # Link libraries
    (env)                    # Initialize shell environment (e.g. for pipenv)
    (build)                  # Build project (if not built autom. by start)
    start                    # Start containers / watch / application
    restart                  # Restart containers / watch / application
    restart:client           # Restart client container
    init                     # Initialize databases and storages
    init --clean             # Clean and reinitialize databases and storages
    (run)                    # Run the application (if not run autom. by start)
    open app                 # Open application on browser
    open admin               # Open admin GUI on browser
    open builds              # Open build logs on browser
    open boards              # Open project kanban board(s) on browser
    open -h                  # List all links
    info                     # Show info required for logging in to app
    lint                     # Lint code
    unit                     # Run all unit tests
    unit:client              # Run all unit tests of client container
    unit:client car          # Run the 'car' unit test of client container
    test                     # Run all integration and e2e tests
    test:server              # Run all integration and e2e tests of server c...
    test:server trip car     # Run the 'car' test of 'trip' test suite on...
    db connect               # Access default database from command line
    db connect:reportdb      # Access report database from command line
    db proxy                 # Show db conn details. Start a proxy if required.
    db add: role_enum        # Add a migration for default database
    db add:report role_enum  # Add a migration for report database
    db deploy                # Deploy migrations to default database
    db import: ./file.sql    # Import a file to default database
    workspace kill           # Kill all running processes (e.g. containers)
    workspace clean          # Remove all unused build artifacts (e.g. images)
    shell:server             # Start shell inside a container named 'server'
    exec:server echo foo     # Execute a command in a container named 'server'
    copy to:server ./loc /sr # Copy a file/folder to server container
    copy from:server /sr .   # Copy a file/folder from server container
    sync to:server ./loc /sr # Sync folder to server container
    sync from:server /sr .   # Sync folder from server container
    commit:client            # Commit changes to client container image
    clean:server             # Clean server container by deleting it
    docs                     # Generate documentation
    check size               # Analyze size
    check size:client        # Analyze size of the client
    check deps               # Check dependencies
    check deps:worker        # Check dependencies of the worker

  ACCESSING A REMOTE ENVIRONMENT
    open app:dev             # Open application on browser
    open admin:dev           # Open application admin GUI on browser
    info:dev                 # Show information required for signing in
    status:dev               # Show application status
    secrets:dev              # Show secrets
    test:dev                 # Run integration/e2e tests against dev env
    logs:worker:dev          # Tail logs of a container named 'worker'
    kill:worker:dev          # Kill a container named 'worker'
    shell:server:dev         # Start a shell on a container named 'server'
    exec:server:dev echo foo # Execute a command in a container named 'server'
    open logs:dev            # Open logs on browser (e.g. Stackdriver or EFK)
    open storage:dev         # Open storage bucket on browser
    init:dev --clean         # Reinitialize databases and storages
    copy to:server:dev ./file /app     # Copy a file/folder to server container
    copy from:server:dev /app/file .   # Copy a file/folder from server containr
    sync to:server:dev ./asdf /app     # Sync folder to server container
    sync from:server:dev /app/asdf .   # Sync folder from server container

  DATABASE OPERATIONS
    db connect:dev           # Access default database on command line
    db connect:reportdb:dev  # Access report database on command line
    db proxy:dev             # Start a database proxy for a GUI tool access
    db import:dev ./file.sql # Import a file to default database
    db dump:dev ./dump.sql   # Dump default database to a file
    db log:dev               # View change log of default database
    db recreate:dev          # Recreate the default database
    db deploy:dev            # Deploy changes to default database
    db rebase:dev            # Rebase a database (db revert + db deploy)
    db rebase:dev b91b7b2    # Rebase a database (db revert + db deploy)
    db revert:dev b91b7b2    # Revert a database
    db diff:dev test         # Compare db schemas of dev and test environments
    db copy between:test:dev           # Copy test database to dev
    db copyquick between:test:dev      # Copy test database to dev (WARNING!!)

  STORAGE OPERATIONS
    storage mount:dev                  # Mount dev storage bucket to ./mnt/BUCKT
    storage mount:dev ./mymount        # Mount dev storage bucket to ./mymount
    storage copy from:dev /sour ./dest # Copy files from dev bucket
    storage copy to:dev ./sour /dest   # Copy files to dev bucket
    storage sync from:dev /sour ./dest # Sync files from dev bucket
    storage sync to:dev ./sour /dest   # Sync files to dev bucket

  VERSION CONTROL
    vc conventions           # Show version control conventions
    vc env list              # List all environment branches
    vc env: dev              # Switch to the dev environment branch
    vc env merge             # Merge current env branch to the next env branch
    vc env merge: dev stag   # Merge changes between envs: dev -> ... -> stag
    vc feat list             # List all feature branches
    vc feat: pricing         # Switch to feature/pricing (create if not exists)
    vc feat rebase           # Rebase current feature branch with the original
    vc feat merge            # Merge current feature branch to the original
    vc feat pr               # Create a pull-req for the current feature branch
    vc feat squash           # Merge current feature branch as a single commit
    vc commit revert         # Revert the latest commit by creating a new commit
    vc commit undo           # Undo latest commit from local and remote branch
    vc commit erase          # Erase latest commit from loc/rem branch and files

  MANUAL DEPLOYMENT OPERATIONS
    deployment start:dev          # Start ci build for dev environment manually
    deployment cancel:dev         # Cancel an ongoing dev environment ci build
    deployment build:worker:dev   # Build and deploy worker container to dev env
    deployment deploy:dev 1.1.1   # Deploy prebuilt version to dev env
    deployment revision:dev       # Show current revision on dev env
    deployment revert:dev 20      # Revert application on dev env to revision 20

  PROJECT TEMPLATES
    project create: my-template   # Create a project based on template
    project upgrade               # Upgrade project using template

  PROJECT CONFIGURATION
    project apply            # Migrate project to the latest configuration
    project docs             # Populate taito settings to project documentation
    project contact          # List project contacts
    project destroy          # Destroy project

  PROJECT INFRASTRUCTURE MANAGEMENT
    env apply:dev            # Apply project specific changes to dev env
    env rotate:dev           # Rotate project specific secrets in dev env
    env rotate:dev gcloud    # Rotate project specific gcloud secrets in dev env
    env destroy:dev          # Destroy dev environment of the current project

  ZONE INFRASTRUCTURE MANAGEMENT
    zone apply               # Apply infrastructure changes to the zone
    zone status              # Show status summary of the zone
    zone doctor              # Analyze and repair the zone
    zone maintenance         # Execute maintenance tasks interactively
    zone destroy             # Destroy the zone

  PASSWORD SHARING
    passwd share             # Share a password using a one-time magic link
    passwd list: movie       # List all movie passwords
    passwd get: movie-key    # Get movie-key passwd
    passwd set: movie-key    # Set movie-key passwd
    passwd rotate: movie     # Rotate all movie passwords

  PROJECT MANAGEMENT:
    issue auth                                     # Authenticate
    issue add: delete post - feature posts         # Add a new issue
    issue status: delete post - in progress - me   # Change status
    issue comment: delete post                     # Add a comment
    issue open: delete post                        # Open issue on browser
    issue list: todo                               # List todo issues
    open kanban                                    # Open kanban board

  HOUR REPORTING:
    hours auth                         # Authenticate
    hours start                        # Start/continue the timer
    hours pause                        # Pause the timer
    hours stop                         # Stop the timer and create an entry
    hours add: 6.5                     # Add an hour entry for today
    hours add: 6.5 yesterday           # Add an hour entry for yesterday
    hours add: 6.5 tue Did some work   # Add an hour entry for last tuesday
    hours list                         # Hour entries of this month
    hours list: all                    # Hour entries for all projects
    hours summary                      # Hour summary for this month
    hours summary: this-week           # Hour summary for this week
    open hours                         # Open hour reporting on browser

    TODO bulk adds (e.g. three weeks on vacation)

OPTIONS

  --help, -h
    Show help.txt of current project and a list of all taito-cli commands.
    Run 'taito COMMAND -h' to get help for a specific command or
    'taito PREFIX -h' to get help for a specific set of commands.

  --search, -s
    Same as '--help' but executes a wider search by including also command
    descriptions in search.
    TODO implement

  --trouble
    Show trouble.txt of current project and taito-cli.

  --readme
    Show README.md of current project.

  --upgrade
    Upgrade taito-cli and its extensions to the latest version.

  --auth:ENV
    Authenticate in the context of the given environment.

  --dev, -d
    Run in development mode. In the development mode your local taito-cli
    directory is mounted on the container.
    TODO always pass on -d switch when running another taito command

  --
    Execute any command inside the taito-cli container. Example:
    taito -- kubectl get pods

  --shell
    Start interactive shell on the taito-cli container.

  --admin, -a
    Execute as admin.

  --project PROJECT, -p PROJECT
    Execute command in the context of given project. This command allows
    you to execute a taito-cli command without cloning the project repository
    to your local disk. Examples:
      taito -p my-project open app:dev
      taito -p org@another-project open info:prod
      TODO implement

  --organization ORG, -o ORG
    Use taito configuration overrides defined in '~/.taito/taito-config-ORG.sh'.

  --verbose, -v
    Show commands that plugins execute.

  --debug
    Show debug output.
    TODO just output everything with 'set -x' ?

  --quiet, -q
    No logging output.
    TODO implement

  --autocomplete, --descriptions
    Prints all commands.

  -c
    Informs taito-cli that the command is continuing from a previous command
    execution and therefore the copyright license should not be shown again.

  -z
    Skip taito command overrides during execution.

ARGUMENTS

  Target pod (TARGET) and environment (ENV) are included in the command itself.
  Colon is used as delimiter. ENV is local by default if omitted. For example:
    $ taito shell:worker
    $ taito shell:worker:dev
    $ taito status:dev
    $ taito open app:dev

  All other arguments are given after the command. For example:
    $ taito exec:worker:dev echo jee
    $ taito db import:dev file.sql
    $ taito hours add: 6.5

  ENV
    Environment: For example 'local', 'feat-orders', 'dev', 'test', 'stag',
    'canary' or 'prod'. Environment is 'local' by default. For mobile projects
    ENV can also be 'ios' or 'android'.

  TARGET
    Depending on the environment, TARGET may reference to a Kubernetes pod,
    a Docker container, a function, a database or some other module.

ALTERNATIVE HYPHEN SYNTAX

  You can also use hyphen instead of space e.g. `taito db-connect:dev`

PROJECT: BASIC OPERATIONS

  > All basic operation commands use 'oper' as a command grouping prefix but
  > you can leave it out if you like.

  install [--clean] [--lock]
    Install everything that needs to installed locally on host (e.g. libraries
    for linting and autocompletion purposes). Use the '--clean' flag to execute
    a clean install. Use the '--lock' flag to install version locked packages.
    Use the '--all' flag to request for a full install in case you need all
    libraries to be installed on host for autocompletion, etc.
    TIP: Enable the 'make', 'npm' or 'pipenv' plugin.

  link
    Link libraries.

  env
    Initialize the development environment. This command is for non-dockerized
    projects that require project specific environment variables to be set.
    For example the 'pipenv' plugin uses this command to initialize the python
    virtualenv.

  build
    Builds a project. This command is for non-dockerized projects that need to
    be compiled or built before application can be started.
    TIP: Enable the 'make' plugin and implement the script in your makefile.

  start[:TARGET][:ENV] [--background] [--clean] [--prod] [ARGS]
    Starts the defined environment e.g 'taito start' or 'taito start:dev'.
    Optional arguments for local environment:
    .
    --backgroud: Run in background.
    --clean: Clean everything before start.
    --prod: Run production build instead of development build.
    TARGET: Start only the given pod/container/function/module/program
    ARGS: Additional arguments

  restart[:TARGET][:ENV]
    Starts the defined environment e.g 'taito restart' or 'taito restart:dev'.
    Optional arguments:
    .
    TARGET: Start only the given pod/container/function/module/program

  run[:TARGET]:ENV [--no-deps] [-d,--device] [ARGS]
    Runs the application in the defined environment e.g 'taito run:ios'.
    Optional arguments for running in local environment:
    .
    -d,--device: Run on a real device instead of emulator.
    --no-deps: TODO Do not run dependencies (e.g linked services)
    TARGET: Run only the given pod/container/function/module/program
    ARGS: Additional arguments

  init[:ENV] [--clean]
    Make sure that everything has been initialized after start (database, etc.).
    Use the '--clean' flag to delete all existing data before init.

  stop[:ENV]
    Stop. Stops the application in the defined environment e.g 'taito stop'
    or 'taito stop:dev'.

  info[:ENV]
    Show some useful information about the environment (e.g. shared user
    accounts that you can use to log in).
    TIP: Enable the 'make' or 'npm' plugin and implement info[:ENV] script
    in your makefile/package.json.

  unit[:TARGET] [TEST]
    Run unit tests.
    TIP: Enable the 'make' or 'npm' plugin and implement unit script in your
    makefile/package.json.

  test[:TARGET][:ENV] [SUITE] [TEST]
    Run integration and end-to-end tests.
    TIP: Enable the 'make' or 'npm' plugin and implement test scripts in your
    makefile/package.json using the `taito `. You can configure test users and
    passwords for each environment in taito-config.sh as those settings are
    available to your script as environment variables. At least implement tests
    for dev environment.

  analyze
    Analyzes implementation and gives you feedback accordingly (webpack
    bundle analysis, code quality analysis, vulnerability analysis, etc.)
    TIP: Enable the 'make' or 'npm' plugin and implement analyze script
    in your makefile/package.json

  scan
    Lint code, scan for vulnerabilities, etc.
    TIP: Enable the 'make' or 'npm' plugin and implement scan script in your
    makefile/package.json.

  lint
    Lint code
    TIP: Enable the 'make' or 'npm' plugin and implement lint script in your
    makefile/package.json.

  docs
    Generate docs e.g. API docs from API definitions and PDF files from
    markdown documentation.
    TIP: Enable the 'make' or 'npm' plugin and implement docs script in your
    makefile/package.json.

  secrets[:ENV]
    Retrieves all secrets that might be needed by a developer or CI/CD build.

  status[:ENV]
    Show status summary of environment (status of services, pods, etc.).

  logs[:TARGET][:ENV]
    Follow logs of a pod. Examples:
    $ taito logs:client
    $ taito logs:client:dev
    $ taito logs:my-app-client-3034393823-2f5jf:dev

  shell[:TARGET][:ENV]
    Start a shell on a container. Examples:
    $ taito shell: client
    $ taito shell:dev client
    $ taito shell:dev my-app-client-3034393823-2f5jf

  exec[:TARGET][:ENV] COMMAND
    Execute command in container.
    Examples:
    $ taito exec:client echo "taito!"
    $ taito exec:client:dev echo "taito!"
    $ taito exec:my-app-client-3034393823-2f5jf:dev echo "taito!"

  copy to:TARGET[:ENV] SOURCE_PATH DESTINATION_PATH
    Copy a file or folder. Examples:
    $ taito copy to:client foo.txt /client/foo.txt
    $ taito copy to:client:dev foo.txt client:/client/foo.txt
    TODO IMPLEMENT

  copy from:TARGET[:ENV] SOURCE_PATH DESTINATION_PATH
    Copy a file or folder. Examples:
    $ taito copy from:client /client/foo.txt .
    $ taito copy from:client:dev /client/foo.txt .
    TODO IMPLEMENT

  sync to:TARGET[:ENV] SOURCE_PATH DESTINATION_PATH
    Sync a folder. Examples:
    $ taito sync to:client ./foo /foo
    $ taito sync to:client:dev ./foo /foo
    TODO IMPLEMENT

  sync from:TARGET[:ENV] SOURCE_PATH DESTINATION_PATH
    Sync a folder. Examples:
    $ taito sync from:client /foo ./foo
    $ taito sync from:client:dev /foo ./foo
    TODO IMPLEMENT

  kill:TARGET[:ENV]
    Kill a container. Examples:
    $ taito kill:client
    $ taito kill:client:dev
    $ taito kill:my-app-client-3034393823-2f5jf:dev

  commit:TARGET
    Commit changes to a container

  clean[:TARGET]
    Clean.

PROJECT: LINKS

  > You can specify project specific browser links with the links plugin.
  > Here are some recommended link names that are also included in the
  > taito-cli autocomplete scripts:
  >
  > open app[:ENV] - GUI of app
  > open admin[:ENV] - GUI of application admin tool
  > open storage - Storage bucket used by the app
  > open docs - Built docs
  > open boards - Kanban/scrum board(s)
  > open git - Git repository (e.g. GitHub)
  > open vc - Version control repository (e.g. GitHub)
  > open builds - List of builds (e.g. Jenkins, Google container builder)
  > open artifacts - Build artifacts
  > open reports - CI/CD reports (e.g. testing and code analysis)
  > open errors:ENV - Error Tracking (e.g. Sentry)
  > open logs:ENV - Logs (e.g. Stackdriver)
  > open uptime - Uptime monitoring (e.g. Stackdriver)
  > open performance - Performace monitoring (e.g. New Relic)
  > open feedback - User feedback management
  > open analytics - Usage analytics (e.g. Google Analytics)

PROJECT: PROJECT MANAGEMENT

  issue auth [SYSTEM]
    Authenticate to the issue management system.

  issue add: TITLE [- LABELS...]
    Add a new issue. You'll be asked to enter issue description once you run
    the command.

  issue open: TITLE|ID
    Open issue on browser.

  issue status: TITLE|ID - STATUS [- PERSON]
    Change issue status. Optionally assign the issue to another person.
    You'll be asked for a comment once you run the command, but you can leave
    it empty.

  issue comment: TITLE|ID
    Comment on issue. You'll be asked to enter the comment once you run the
    command.

  issue list: [LANES|LABELS]
    List open issues.

PROJECT: HOUR REPORTING

  hours auth [SYSTEM]
    Authenticate to the hour reporting system.

  hours start
    Start/continue the timer

  hours pause:
    Pause the timer

  hours stop [DESCRIPTION]
    Stop the timer and create an hour entry. You'll be asked for a description
    once you run the command. If hour reporting system has multiple tasks
    configured for the project in question, you also need to choose one of the
    tasks.

  hours add: hours [WEEKDAY|today|yesterday] [DESCRIPTION]
    Add an hour entry. You'll be asked for a description once you run the
    command. If hour reporting system has multiple tasks configured for the
    project in question, you also need to choose one of the tasks.
    For example:
    $ taito hours add: 6.5
    $ taito hours add: 5,5 yesterday
    $ taito hours add: 4,5 tue

  hours list: [all]
    List all hour entries for this month. By default lists only for current
    project, but you can list also hour entries for all projects.

  hours summary: [this-month|last-month|this-week|last-week]
    Show hour summary for all projects. Shows summary for this month by default.

  TODO bulk adds (e.g. three weeks on vacation)

GLOBAL: WORKSPACE OPERATIONS

  workspace clean
    Clean your workspace e.g. by deleting all docker container images and
    volumes that you haven't used for a while.

  workspace kill
    Kill all running processes (e.g. kill all docker processes to free reserved
    ports).

PROJECT: VERSION CONTROL OPERATIONS

  vc env conventions
    Show version control conventions.

  vc env list
    List all environment branches.

  vc env: BRANCH [SOURCE_BRANCH]
    Creates a new environment branch or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default source
    branch.

  vc env merge [SOURCE_BRANCH] [DESTINATION_BRANCH] [--force]
    Merges source env branch to target env branch and all env branches in
    between them without making changes to the current local git workspace.
    Current branch is used as the default source branch and the next env branch
    as the default destination branch. The command fails if fast-forward is not
    possible. Merge operations between environment branches should always be
    fast-forwarded so that a container is first built for dev environment and
    then the same container is deployed to other environments as well once
    environment branches are merged.

  vc feat list
    List all feature branches.

  vc feat:[ENV] FEATURE_NAME
    Creates a new branch for a feature or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default env branch
    (source branch).

  vc feat rebase[:ENV] [FEATURE_NAME]
    Rebases a feature branch. The dev branch is used as a default env branch
    that the feature branch is rebased with.

  vc feat merge[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch. The dev branch is used as a
    default env branch (destination for merge). The command suggests rebase
    before merge and delete feature after merge. With rebase you can clean up
    commit history before merge e.g. by reordering commits and selectively
    squashing some of them together.

  vc feat pr[:ENV] [FEATURE_NAME]
    Creates a pull request for a feature. The dev branch is used as a default
    env branch (destination for merge). The command suggests rebase before
    making the pull request. With rebase you can clean up commit history by
    reordering commits and selectively squashing some of them together.

  vc feat squash[:ENV] [FEATURE_NAME]
    Merges a feature to a target branch as a single squashed commit and
    deletes the feature branch. The dev branch is used as a default env
    branch (destination for merge). Use this command for a short-lived feature
    branch with a cohesive set of changes.

  vc commit revert
    Revert the latest commit by creating a new commit.

  vc commit undo
    Undo the latest commit from local and remote repository, but leave the
    local files untouched. The command will fail if your local branch is not
    up-to-date with the remote repository.

  vc commit erase
    Erase the latest commit from local and remote repository, and remove the
    changes also from local files. The command will fail if your local branch
    is not up-to-date with the remote repository.

PROJECT: DATABASE OPERATIONS

  db add:[TARGET] NAME [-r REQUIRES] [-n DESCRIPTION]
    Add a new change to migration plan. Run 'db add' without arguments to get
    help. You can run the change to local database by running `taito db:deploy`.
    Example: 'taito db add order.table -r user.table -n 'Table for orders.'

  db proxy[:TARGET][:ENV] [PROXY_PORT]
    Starts a proxy for accessing a database and shows connections details that
    you should use with your database GUI tool to connect the database. If
    proxy is not required, the command shows connection details nevertheless.
    If you don't have a personal account for the database, you can get a
    working username and password by running `taito secrets:ENV`. Note that
    passwords are rotated once in a while, thus, if you get an authentication
    error, retrieve new secrets by running `taito secrets:ENV` again.

  db connect[:TARGET][:ENV] [USERNAME]
    Access database from command line. DB proxy connection and secrets are
    handled automatically. NOTE: If you want to access database using a GUI
    tool, use the db proxy:ENV command instead.

  db dump[:TARGET][:ENV] FILE
    Take a database dump. DB proxy connection and secrets are handled
    automatically.

  db import[:TARGET][:ENV] FILE
    Import a file to database. DB proxy connection and secrets are
    handled automatically. Always give file path relative to the project root.
    Example: taito db import:dev ./database/my-file.sql

  db deploy[:TARGET][:ENV]
    Deploy changes to database. DB proxy connection and secrets are handled
    automatically.

  db diff[:TARGET][:ENV] [OTHER_ENV]
    Compare database schemas of two environments. DB proxy connection and
    secrets are handled automatically. TODO implement.

  db log[:TARGET][:ENV]
    View change log of database. DB proxy connection and secrets are handled
    automatically.

  db rebase[:TARGET][:ENV] [CHANGE]
    Rebases database by running 'db revert' and then 'db deploy'. DB proxy
    connection and secrets are handled automatically. The command reverts all
    changes by default. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`.

  db revert[:TARGET][:ENV] [CHANGE]
    Revert all database changes. DB proxy connection and secrets are
    handled automatically. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`.

  db recreate[:TARGET][:ENV]
    Recreates the database. Thus on next deployment, all database migrations
    will be run from the beginning. DB proxy connection and secrets are handled
    automatically.

  db copy between[:TARGET]:SOURCE_ENV:DEST_ENV
    Copy database from one environment to another. For example
    `db copy between:prod:stag` or `db copy between:dev:local`. If you do not
    have enough rights, ask devops personnel to do this for you. DB proxy
    connection and secrets are handled automatically.

  db copyquick between[:TARGET]:SOURCE_ENV:DEST_ENV
    Copy database quickly from one environent to another. DB proxy connection
    and secrets are handled automatically. NOTE: The command requires
    that both databases are located on the same database cluster. The command
    might also do some quirky things to make copying quicker so it might not
    be safe to use it with a live production database.

PROJECT: STORAGE OPERATIONS

  storage mount[:TARGET]:ENV [MOUNT_PATH]
    Mount storage bucket to MOUNT_PATH or ./mnt/BUCKET

  storage copy between[:TARGET]:ENV:DEST_ENV [SOURCE] [LOCAL_DEST]
    Copy files between storage buckets

  storage copy from[:TARGET]:ENV SOURCE LOCAL_DEST
    Copy files from storage bucket to local disk

  storage copy to[:TARGET]:ENV LOCAL_SOURCE DEST
    Copy files from local disk to storage bucket

  storage sync from[:TARGET]:ENV SOURCE LOCAL_DEST
    Sync files from storage bucket to local disk

  storage sync to[:TARGET]:ENV SOURCE DEST
    Sync files from local disk to storage bucket

PROJECT: MANUAL DEPLOYMENT OPERATIONS

  deployment start:ENV
    Start ci build manually.

  deployment cancel:ENV [IGNORE_BUILD_ID]
    Cancel an ongoing build, but ignore the given build id.

  deployment build:[ENV] NAME
    Build, push and deploy a container or some other deployable module to
    server. Use this when you need to quickly deploy manual changes to some
    environment. Example: taito deployment build:dev server

  deployment deploy:ENV [IMAGE_TAG|SEMANTIC_VERSION] [--dry-run]
    Deploys a prebuilt version to the given environment using the current
    configuration. Uses the latest prebuilt version of the environment
    in question by default.

  deployment revision[:ENV]
    Show current revision.

  deployment revert[:ENV] [REVISION]
    Reverts application to another revision. Reverts to the previous version
    if revision has not been given as argument. You can see current revision
    number by running `taito deployment revision[:ENV]`.

PROJECT: AUTOMATIC CI/CD OPERATIONS

  ci prepare
    Set ci flags by status check. The ci flags are used to control the following
    ci steps. For example if taitoflag_images_exist is set, many of the ci steps
    will be skipped since all images have already been built and tested
    by some previous CI build.

  ci build:TARGET[:ENV] IMAGE_TAG [PROJECT_REPOSITORY]
    Builds image. Example: 'taito ci build:client:dev test1'.

  ci push:TARGET[:ENV] IMAGE_TAG [PROJECT_REPOSITORY]
    Pushes image to image registry. Example: 'taito ci push:client test1'.

  ci deploy[:ENV] [IMAGE_TAG] [--dry-run]
    Deploy the application either by using IMAGE_TAG given as parameter or
    using the latest image found for the environment in question. Use dry-run
    switch to execute a dry run. Example: 'taito ci deploy:dev test1'.
    NOTE: Does not deploy database changes (TIP: 'taito db deploy[:ENV]')

  ci wait[:ENV]
    Waits until application has been succesfully deployed to server.
    For example polls the app url until version number changes to something
    else. This is used by CI/CD scripts to wait deployment before running the
    api and e2e tests.

  ci verify[:ENV]
    Verifies that everything went ok e.g. by checking test results. If something
    went wrong and autorevert is enabled for the environment, runs
    `taito db revert[:ENV]` and `taito deployment revert[:ENV]`.

  ci publish
    Publishes build artifacts (e.g. docs, test reports) to a central location.

  ci release pre:ENV
  ci release post:ENV
    Release pre and post handling. These commands usually generate release notes
    automatically and tag the git repository with a new version number.
    TIP: Enable the 'make' or 'npm' plugin and implement release-pre:prod and
    release-post:prod scripts in your makefile/package.json.

PROJECT: TEMPLATES

  project create: TEMPLATE
    Create a new project using a template.

  project migrate: TEMPLATE
    Migrate an old project to use the given template.

  project upgrade
    Upgrade current project to the latest version of the project template.

PROJECT: BASIC SETUP

  project apply
    Migrate project to the latest configuration.

  project destroy
    Destroy project.

  project docs
    Populate taito settings to project documentation (e.g. links)

  project contacts
    List of project contacts.
    TIP: Enable the 'make' or 'npm' plugin and implement project-contacts
    script in your makefile/package.json.

PROJECT: ENVIRONMENT SETUP

  env apply:ENV [NAME]
    Migrate environment to the latest configuration.
    TODO: implement using terraform.

  env destroy:ENV [NAME]
    Destroy an environment.

  env finalize:prod [NAME]
    Finalize production environment by setting up DNS and monitoring.
    TODO: remove once implemented with terraform

  env rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

PROJECT: ALTERNATIVE ENVIRONMENT SETUP

  > An alternative environment uses the same database as the main environment,
  > but containers are built from an alternative branch. You can use alternative
  > environments for canary releases, A/B testing, etc.

  alt apply:ENV
    Migrate environment to the latest configuration.
    TODO: implement using terraform.

  alt destroy:ENV
    Destroy alternative environment. TODO not implemented.

  alt rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

ZONE

  zone apply [NAME]
    Apply infrastructure changes to a zone.

  zone status [NAME]
    Show status summary of a zone.

  zone doctor [NAME]
    Analyze and repair a zone.

  zone maintenance [NAME]
    Execute supervised maintenance tasks that need to be run periodically for
    a zone (e.g. upgrades, secret rotation, log reviews, access right reviews).

  zone destroy [NAME]
    Destroy a zone.

GLOBAL: PASSWORDS

  passwd share
    Sets a one-time shared password that can be read only once using a
    magic link and will be removed automatically after a while if it has not
    been read at all.
    TODO implement.

  passwd list [-c COLLECTION] [NAME_FILTER]
    List secret names from commonly shared secrets.
    TODO implement.

  passwd get [-c COLLECTION] [NAME]
    Get password from a secret collection.
    TODO implement.

  passwd set [-c COLLECTION] [NAME]
    Save password to a secret collection. Takes a backup of the old secret
    if it exists.
    TODO implement.

  passwd rotate [-c COLLECTION] [NAME_FILTER]
    An interactive command for rotating passwords of a collection one by one.
    TODO implement.

GLOBAL: UTILS

  util browser: URL
    Opens the given url in default web browser. You can use this command in
    your build scripts.

  util commit
    Commits current changes to the taito-cli container. For example, you
    can start a shell running 'taito --shell', make some changes and then
    commit all changes by running 'taito util-commit' inside the container.

  util test:TARGET [SUITE_FILTER]
    Run test suites for the given container.
