TAITO-CLI
---------

SYNTAX ALTERNATIVES

  SPACE SYNTAX
    taito workspace clean
    taito open app:dev
    taito logs:dev client
    taito git feat squash: myfeature

  HYPHEN SYNTAX
    taito workspace-clean
    taito open-app:dev
    taito logs:dev client
    taito git-feat-squash myfeature

  > When using the space syntax, you must add an environment definition or
  > use plain ':' to separate the command from arguments. Examples:
  > $ taito logs:dev client
  > $ taito git feat squash: myfeature
  > NOTE: Autocomplete does not support the space syntax yet.

  > You should always use the internal hyphen syntax when defining build
  > targets (e.g. npm scripts) as some build tools do not support spaces in
  > build target names.

OPTIONS

  --help, -h
    Show help.txt of current project and a list of all taito-cli commands.
    Run 'taito COMMAND -h' to get help for a specific command or
    'taito PREFIX -h' to get help for a specific set of commands.

  --search, -s
    Same as '--help' but includes also command descriptions in command search.
    TODO implement

  --trouble
    Show trouble.txt of current project and taito-cli.

  --readme
    Show README.md of current project and taito-cli.

  --upgrade
    Upgrade taito-cli and its extensions to the latest version.

  --auth:ENV
    Authenticate in the context of the given environment.

  --
    Execute any command inside the taito-cli container. Example:
    taito -- kubectl get pods

  --shell
    Start interactive shell on the taito-cli container.

  --admin, -a
    Execute as admin.

ARGUMENTS

  ENV
    Environment: 'local', 'feature', 'dev', 'test', 'staging' or 'prod'.
    Environment is 'local' by default. For mobile projects ENV can also be
    'ios' or 'android'.

  POD
    Depending on the environment, POD may reference to a Kubernetes pod,
    a Docker container or a function.

PROJECT: BASIC OPERATIONS

  > The 'oper' grouping prefix is used as a default. You can leave it out
  > if you like.

  oper install
    Install everything that needs to installed locally on host (e.g. libraries
    for linting and autocompletion purposes)
    TIP: Enable the 'make', 'npm' or 'pipenv' plugin.

  oper env
    Initialize the development environment. This command is for non-dockerized
    projects that require project specific environment variables to be set.
    For example the 'pipenv' plugin uses this command to initialize the python
    virtualenv.

  oper build
    Builds a project. This command is for non-dockerized projects that need to
    be compiled or built before application can be started.
    TIP: Enable the 'make' plugin and implement the script in your makefile.

  oper start[:ENV] [POD] [--clean] [--prod] [--device] [-- ARGS]
    Starts the application in the defined environment e.g 'taito start'
    or 'taito start:dev'. Optional arguments for local usage:
    .
    POD: Start only the given pod/container/module
    --clean: Clean everything before start.
    --prod: Run production build instead of development build.
    --device: Run on device instead of emulator.
    -- ARGS: Arguments for the application.

  oper init
    Make sure that everything has been initialized after start (database, etc.).

  oper stop[:ENV]
    Stop. Stops the application in the defined environment e.g 'taito stop'
    or 'taito stop:dev'.

  oper users[:ENV]
    Show user accounts that you can use to log in.
    TIP: Enable the 'make' or 'npm' plugin and implement oper-users[:ENV] script
    in your makefile/package.json. Hard coded user accounts for local, dev and
    test environments suffice. Usually not implemented for staging and
    production environments.

  oper secrets[:ENV]
    Retrieves all secrets that might be needed by a developer or CI/CD build.

  oper status[:ENV]
    Show status summary of environment (status of services, pods, etc.).

  oper logs[:ENV] POD [CONTAINER]
    Follow logs of a pod. Examples:
    $ taito logs: client
    $ taito logs:dev client
    $ taito logs:dev my-app-client-3034393823-2f5jf

  oper shell[:ENV] [POD] [CONTAINER]
    Start a shell on a pod. Examples:
    $ taito shell
    $ taito shell: client
    $ taito shell:dev client
    $ taito shell:dev my-app-client-3034393823-2f5jf

  oper exec[:ENV] POD CONTAINER COMMAND
    Execute command in pod. Run 'taito status[:ENV]' first to get the pod name
    and status. Give - as container if it should be determined automatically.
    Examples:
    $ taito exec: client - echo "taito!"
    $ taito exec:dev client - echo "taito!"
    $ taito exec:dev my-app-client-3034393823-2f5jf - echo "taito!"

  oper kill[:ENV] [POD]
    Kill a pod. Examples:
    $ taito kill
    $ taito kill: client
    $ taito kill:dev client
    $ taito kill:dev my-app-client-3034393823-2f5jf

  oper clean [data | build]
    Clean.

  oper lock
    Creates lock files that lock library versions.

  oper analyze
    Analyzes implementation and gives you feedback accordingly (webpack
    bundle analysis, code quality analysis, vulnerability analysis, etc.)
    TIP: Enable the 'make' or 'npm' plugin and implement oper-analyze script
    in your makefile/package.json

WORKSPACE OPERATIONS

  workspace clean
    Clean your workspace e.g. by deleting all docker container images and
    volumes that you haven't used for a while.

  workspace kill
    Kill all running processes (e.g. kill all docker processes to free reserved
    ports).

GIT OPERATIONS

  git env list
    List all environment branches.

  git env:ENV [SOURCE_BRANCH]
    Creates a new environment branch or executes a normal branch checkout if
    the branch already exists. The dev branch is used as a default source
    branch.

  git env merge:ENV SOURCE_BRANCH
    Merges source env branch to target env branch without making changes
    to the current local git workspace. The command fails if fast-forward is not
    possible. Merge operations between environment branches should always be
    fast-forwarded so that a container is first built for dev environment and
    then the same container is deployed to other environments as well once
    environment branches are merged.

  git feat list
    List all feature branches.

  git feat:[ENV] FEATURE_NAME
    Creates a new local branch for a feature or executes a normal branch
    checkout if the branch already exists. The dev branch is used as a default
    env branch (source branch).

  git feat squash:[ENV] FEATURE_NAME
    Merges a feature to a target branch as a single squashed commit and
    deletes the feature branch. The dev branch is used as a default env
    branch (destination for merge). Use this command for a short-lived feature
    branch with a cohesive set of changes.

  git feat merge:[ENV] FEATURE_NAME
    Merges a feature to a target branch. The dev branch is used as a
    default env branch (destination for merge). The command suggests rebase
    before merge and delete feature after merge. With rebase you can clean up
    commit history before merge e.g. by reordering commits and selectively
    squashing some of them together.

  git feat pr:[ENV] FEATURE_NAME
    Creates a pull request for a feature. The dev branch is used as a default
    env branch (destination for merge). The command suggests rebase before
    making the pull request. With rebase you can clean up commit history by
    reordering commits and selectively squashing some of them together.

PROJECT: DATABASE OPERATIONS

  db add: NAME [-r REQUIRES] [-n DESCRIPTION]
    Add a new change to migration plan. Run 'db add' without arguments to get
    help. You can run the change to local database by running `taito db:deploy`.
    Example: 'taito db add order.table -r user.table -n 'Table for orders.'

  db proxy[:ENV]
    Create a proxy for accessing a database with your database GUI tool. If you
    don't have a personal account for the database, you can get a working
    username and password by running `taito oper secrets:ENV`. Note that passwords
    are rotated once in a while, thus, if you get an authentication error,
    retrieve new secrets by running `taito oper secrets:ENV` again.

  db open[:ENV] [USERNAME]
    Access database from command line. DB proxy connection and secrets are
    handled automatically. NOTE: If you want to access database using a GUI
    tool, use the db proxy:ENV command instead.

  db dump[:ENV]
    Take a database dump. DB proxy connection and secrets are handled
    automatically.

  db import:[ENV] FILE
    Import a file to database. DB proxy connection and secrets are
    handled automatically. Always give file path relative to the project root.
    Example: taito db import:dev ./database/my-file.sql

  db deploy[:ENV]
    Deploy changes to database. DB proxy connection and secrets are handled
    automatically. NOTE: Usually there is no need to run this command manually.

  db diff:[ENV] [OTHER_ENV]
    Compare database schemas of two environments. DB proxy connection and
    secrets are handled automatically. TODO implement.

  db log[:ENV]
    View change log of database. DB proxy connection and secrets are handled
    automatically.

  db revert:[ENV] [CHANGE]
    Revert database changes. DB proxy connection and secrets are
    handled automatically. Revert the previous migration batch by running
    `taito db revert[:ENV]`. If you would like to revert to a specific revision
    instead, view the change log first with `taito db log[:ENV]` and then run
    `taito db revert[:ENV] CHANGE`. TODO currently always requires CHANGE
    param.

  db recreate[:ENV]
    Recreates the database. Thus on next deployment, all database migrations
    will be run from the beginning. DB proxy connection and secrets are handled
    automatically.

  db copy:ENV SOURCE_ENV
    Copy database from one environment to another. For example
    `db copy:staging prod` or `db copy:local dev`. If you do not have enough
    rights, ask devops personnel to do this for you. DB proxy connection and
    secrets are handled automatically.

  db copyquick:ENV SOURCE_ENV
    Copy database quickly from one environent to another. DB proxy connection
    and secrets are handled automatically. NOTE: The command locks source
    database from other users until copying is finished. It also requires
    that both databases are located on the same database cluster. Do not use
    this for production database unless you are sure nobody is using the system.

PROJECT: MANUAL DEPLOYMENT OPERATIONS

  manual cancel:ENV [IGNORE_BUILD_ID]
    Cancel an ongoing build (but ignore the given build id). CI/CD scripts may
    use this, for example, to cancel an ongoing build when a new build is
    started. It may also be handy in case somebody pushes something to a wrong
    branch accidentally.

  manual deploy:ENV TAG|COMMIT
    Deploys a prebuilt version to an environment. TODO implement

  manual build deploy:[ENV] CONTAINER_NAME
    Build, push and deploy a container to server. Use this when you need to
    quickly deploy manual changes to some environment. NOTE: The command
    does not run any automatic tests and therefore should not be used in
    a production environment. TODO not implemented yet.
    Example: taito manual build deploy:dev server

  manual revision[:ENV]
    Show current revision.

  manual revert[:ENV] [REVISION]
    Reverts application to another revision. Reverts to the previous version
    if revision has not been given as argument. You can see current revision
    number by running `taito manual revision[:ENV]`.

PROJECT: AUTOMATIC CI/CD OPERATIONS

  ci prepare
    Set ci flags by status check. The ci flags are used to control the following
    ci steps. For example if taitoflag_images_exist is set, many of the ci steps
    will be skipped since all images have already been built and tested
    by some previous CI build.

  ci test unit
    Run all unit tests.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-test-unit script
    in your makefile/package.json.

  ci scan
    Lint code, scan for vulnerabilities, etc.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-scan script in your
    makefile/package.json.

  ci docs
    Generate docs e.g. API docs from API definitions and PDF files from
    markdown documentation.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-docs script in your
    makefile/package.json.

  ci build:[ENV] CONTAINER_NAME IMAGE_TAG [PROJECT_REPOSITORY]
    Builds image. Example: 'taito ci build:dev client test1'.

  ci push: CONTAINER_NAME IMAGE_TAG [PROJECT_REPOSITORY]
    Pushes image to image registry. Example: 'taito ci push:dev client test1'.

  ci deploy[:ENV] [IMAGE_TAG] [--dry-run]
    Deploy the application either by using IMAGE_TAG given as parameter or
    using the latest image found for the environment in question. Use dry-run
    switch to execute a dry run. Example: 'taito ci deploy:dev test1'.
    NOTE: Does not deploy database changes (TIP: 'taito db deploy[:ENV]')

  ci wait[:ENV]
    Waits until application has been succesfully deployed to server.
    For example polls the app url until version number changes to something
    else. This is used by CI/CD scripts to wait deployment before running the
    api and e2e tests.

  ci test api[:ENV]
    Run all api tests.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-test-api:ENV script
    in your makefile/package.json. You can configure test users and passwords
    for each environment in taito-config.sh as those settings are available to
    your script as environment variables. At least implement tests for local
    environment (other target environments are optional).

  ci test e2e[:ENV]
    Run all e2e tests.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-test-e2e:ENV script
    in your makefile/package.json. You can configure test users and passwords
    for each environment in taito-config.sh as those settings are available to
    your script as environment variables. At least implement tests for local
    environment (other target environments are optional).

  ci verify[:ENV]
    Verifies that everything went ok e.g. by checking test results. If something
    went wrong and autorevert is enabled for the environment, runs
    `taito db revert[:ENV]` and `taito manual revert[:ENV]`.

  ci publish
    Publishes build artifacts (e.g. docs, test reports) to a central location.

  ci release pre:ENV
  ci release post:ENV
    Release pre and post handling. These commands usually generate release notes
    automatically and tag the git repository with a new version number.
    TIP: Enable the 'make' or 'npm' plugin and implement ci-release-pre:prod and
    ci-release-post:prod scripts in your makefile/package.json.

PROJECT: BASIC SETUP

  project config
    Configure project.

  env create:ENV [GIT_BRANCH]
    Create an environment. Creates build trigger for the given branch if branch
    was given as argument. Otherwise uses default branch determined by ENV.

  env migrate:ENV
    Migrate environment to the latest configuration.
    TODO implement using terraform

  env delete:ENV
    Delete an environment.

  env rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

  env cert[:ENV] DOMAIN
    Add a custom certificate.

PROJECT: ALTERNATIVE ENVIRONMENT SETUP

  > An alternative environment uses the same database as the main environment,
  > but containers are built from an alternative branch. You can use alternative
  > environments for canary releases, A/B testing, etc.

  env alt create:ENV [NAME] [GIT_BRANCH]
    Create an alternative environment. TODO not implemented.

  env alt migrate:ENV
    Migrate environment to the latest configuration.
    TODO implement using terraform

  env alt delete:ENV [NAME]
    Delete alternative environment. TODO not implemented.

  env alt rotate:ENV [NAME_FILTER]
    Rotate secrets for an environment.

  env alt cert[:ENV] DOMAIN
    Add a custom certificate.

PROJECT: CONTACTS

  contacts development
    List of contacts required for development.
    TIP: Enable the 'make' or 'npm' plugin and implement contacts-development
    script in your makefile/package.json.

  contacts maintenance
    List contacts that should be notified of a maintenance break, incident or
    some other problems.
    TIP: Enable the 'make' or 'npm' plugin and implement contacts-maintenance
    script in your makefile/package.json.

  contacts users [TYPE]
    TODO optional command for listing users that should be notified of
    incidents, etc? Generated from user database?

UTILS

  util browser: URL
    Open the given url in a web browser.
