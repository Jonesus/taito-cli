----------------------
### TAITO-CLI HELP ###
----------------------

ARGUMENTS
---------

ENV
  Environment: 'local', 'feature', 'dev', 'test', 'staging' or 'prod'.
  Environment is 'local' by default. For mobile projects ENV can also be
  'ios' or 'android'.

POD
  Depending on the environment, POD may reference to a Kubernetes pod,
  a Docker container or a function.


BASIC COMMANDS
--------------

b-help
  Show help.txt of current project and a list of all taito-cli commands.

b-trouble
  Show trouble.txt of both current project and taito-cli.

b-readme
  Show README.md of both current project and taito-cli.

b-auth:ENV
  Authenticate in the context of the given environment.


ADVANCED COMMANDS
-----------------

--
  Execute any command inside the taito-cli container e.g.
  'taito -- kubectl get pods'.

--login
  Login to the taito-cli container.


PROJECT: BASIC OPERATIONS
-------------------------

o-install
  Install everything that needs to installed locally, e.g. linter libraries
  to be used by your editor. TIP: Enable the npm plugin as it will call
  `npm install` automatically.

o-compile
  Compile (for projects that need to be compiled). TIP: Enable the npm plugin
  and implement o-compile script in your package.json.

o-start[:ENV] [--clean]
  Start.

o-run[:ENV]
  Run on device (ios/android)

o-init
  Make sure that everything has been initialized (database, etc.). The init
  command is used in local environment only.

open-app[:ENV]
  Open application user interface.

o-stop[:ENV]
  Stop.

o-users[:ENV]
  Show user accounts that you can use to log in. TIP: Enable the npm plugin and
  implement o-users[:ENV] script in your package.json. Hard coded user accounts
  for local, dev and test environments suffice. Usually not implemented for
  staging and production environments.

o-status[:ENV]
  Show status summary of environment (status of services, pods, etc.).

o-logs[:ENV] POD [CONTAINER]
  See logs of a pod. Run status:ENV first to get the pod name and status.
  Example: taito o-logs:dev myapp-dev-client-3034393823-2f5jf

o-login[:ENV] POD [CONTAINER]
  Login to pod. Run status:ENV first to get the pod name and status.
  Example: taito o-login:dev myapp-dev-client-3034393823-2f5jf

o-exec[:ENV] POD CONTAINER COMMAND
  Execute command on pod. Give - as container if it should be determined
  automatically by pod name.
  Example: taito o-exec:dev myapp-dev-client-3034393823-2f5jf - echo "taito!"

o-kill[:ENV] POD
  Kill pod.

o-clean [data | build]
  Clean.


PROJECT: GIT OPERATIONS
-----------------------

git-env-merge SOURCE DEST
  Merges remote source branch to destination branch using fast-forward and
  pushes changes to remote repository without making changes to the current
  local git workspace. The command fails if fast-forward is not possible. Merge
  operations between environment branches should always be fast-forwarded so
  that a container is first built for dev environment and then the same
  container is deployed to other environments as well once environment branches
  are merged.

git-feat FEATURE_NAME [ORIGINAL_BRANCH]
  Creates a new branch for a feature. Dev branch is used as the original source
  branch if the original branch is omitted.

git-feat-squash FEATURE_NAME [DEST]
  Merges a feature to a destination branch as a single squashed commit and
  deletes the feature branch. Dev branch is used as default if destination
  is omitted. Use this command for a short-lived feature branch with a cohesive
  set of changes.

git-feat-merge FEATURE_NAME [DEST]
  Merges a feature to a destination branch. Dev branch is used as default if
  destination is omitted. The command suggests rebase before merge and delete
  branch after. With rebase you can clean up commit history before merge e.g.
  by reordering commits and selectively squashing some of them together.

git-feat-pr FEATURE_NAME [DEST]
  Creates a pull request for a feature. Dev branch is used as default if
  destination is omitted. The command suggests rebase before
  making a pull request. With rebase you can clean up commit history by
  reordering commits and selectively squashing some of them together.


PROJECT: DATABASE OPERATIONS
----------------------------

db-add NAME [-r REQUIRES] [-n DESCRIPTION]
  Add a new change to migration plan. Run db-add without arguments to get help.
  Example: taito db-add order.table -r user.table -n 'Table for orders.'
  You can run the change to local database by running `taito db:deploy`.

db-proxy:ENV
  Create a proxy for accessing a remote database with your database GUI tool.
  If you don't have a personal account for the database, you can get a working
  username and password by running `taito secrets:ENV`. Note that passwords are
  rotated once in a while, thus, if you get an authentication error, retrieve
  new secrets by running `taito secrets:ENV` again.

db-open[:ENV] [USERNAME]
  Access database from command line. DB proxy connection and secrets are
  handled automatically. NOTE: If you want to access database using a GUI tool,
  use the db-proxy:ENV command instead.

db-dump[:ENV]
  Take dump of a database. DB proxy connection and secrets are
  handled automatically.

db-import[:ENV] FILE
  Import file to database. DB proxy connection and secrets are
  handled automatically.

db-deploy[:ENV]
  Deploy changes to database. DB proxy connection and secrets are handled
  automatically.

db-log[:ENV]
  View change log of database. DB proxy connection and secrets are handled
  automatically.

db-revert[:ENV] [CHANGE]
  Revert database changes. DB proxy connection and secrets are
  handled automatically. Revert the previous migration batch by running
  `taito db-revert[:ENV]`. If you would like to revert to a specific revision
  instead, view the change log first with `taito db-log[:ENV]` and then run
  `taito db-revert[:ENV] CHANGE`. TODO currently always requires CHANGE param.

db-recreate[:ENV]
  Recreates the database. Thus on next deployment, all database migrations
  will be run from the beginning. DB proxy connection and secrets are handled
  automatically.

db-copy:ENV DEST_ENV
  Copy database from one environment to another. For example
  `db-copy:prod staging` or `db-copy:dev local`. If you do not have enough
  rights, ask devops personnel to do this for you. DB proxy connection and
  secrets are handled automatically.

db-copyquick:ENV DEST_ENV
  Copy database quickly from one environent to another. DB proxy connection
  and secrets are handled automatically. NOTE: The command locks source
  database from other users until copying is finished. It also requires
  that both databases are located on the same database cluster. Do not use this
  for production database unless you are sure nobody is using the system.


PROJECT: CI/CD OPERATIONS
-------------------------

This section provides commands for CI/CD and also additional commands that
are related to deployments one way or another. Note that all db related
operations are listed in db section.

ci-build CONTAINER_NAME [IMAGE_TAG] [PROJECT_REPOSITORY]
  Builds image and pushes it to image registry if no image already exists with
  the given tag. Example: 'taito ci-build:dev client test1'. The command
  executes a dry run (does not push) if image tag has not been given as
  argument.

ci-deploy[:ENV] [IMAGE_TAG] [--dry-run]
  Deploy the application either by using IMAGE_TAG given as parameter or
  using the latest image found for the environment in question. Use dry-run
  switch to execute a dry run. Example: 'taito ci-deploy:dev client test1'

ci-canary
  Releases the current staging version to production as a canary release.
  NOTE: Currently you can make canary release only if database changes of
  the new canary release are compatible with the current production version.
  TODO Not implemented yet.

ci-revision:ENV
  Show current revision.

ci-revert:ENV [REVISION]
  Reverts application to another revision. Reverts to the previous version
  if revision has not been given as argument. You can see current revision
  number by running `taito ci-revision[:ENV]`. NOTE: This command does not
  revert database changes. Use 'db-revert[:ENV]' for that.

ci-wait[:ENV]
  Waits until application has been succesfully deployed to server.
  For example polls the app url until version number changes to something else.
  This is used by CI/CD scripts to wait deployment before running the api
  and e2e tests.

ci-verify[:ENV]
  Verifies that everyting went ok e.g. by checking test results. If something
  went wrong and auto-revert is enabled for the environment, runs
  `taito db-revert[:ENV]` and `taito ci-revert[:ENV]`.

ci-docs
  Generate docs e.g. API docs from API definitions and PDF files from
  markdown documentation. TIP: Enable the npm plugin and implement ci-docs
  script in your package.json.

ci-scan
  Lint code, scan for vulnerabilities, etc. TIP: Enable the npm plugin and
  implement ci-scan script in your package.json and your code will be scanned.

ci-test-unit
  Run all unit tests. TIP: Enable the npm plugin and implement ci-test-unit
  script in your package.json.

ci-test-api[:ENV]
  Run all api tests. TIP: Enable the npm plugin and implement ci-test-api
  script in your package.json. You can configure test users and passwords for
  each environment in taito-config.sh as those settings are available to your
  npm script as environment variables.

ci-test-e2e[:ENV]
  Run all e2e tests. TIP: Enable the npm plugin and implement ci-test-e2e
  script in your package.json. You can configure test users and passwords for
  each environment in taito-config.sh as those settings are available to your
  npm script as environment variables.

ci-publish
  Publishes build artifacts (e.g. docs, test reports) to a central location.

ci-release-pre:ENV
ci-release-post:ENV
  Release pre and post handling. These commands usually generate release notes
  automatically and tag the git repository with a new version number.
  TIP: Enable the npm plugin and implement ci-release-pre:prod and
  ci-release-post:prod scripts in your package.json.

ci-cancel:ENV [IGNORE_BUILD_ID]
  Cancel an ongoing build (but ignore the given build id). CI/CD scripts may use
  this, for example, to cancel an ongoing build when a new build is started.
  It may also be handy in case somebody pushes something to a wrong branch
  accidentally.

ci-secrets[:ENV] [--save-as-taito-secrets]
  Retrieves all secrets that might be needed by the CI/CD build or developer.
  If the --save-as-taito-secrets flag is given, the command saves the secrets
  as a taito-secrets.sh file that taito-cli will read the next time it is
  executed. NOTE: taito-secrets.sh should be used only in a temporary CI/CD
  workspace.


PROJECT: ENVIRONMENT SETUP
--------------------------

env-config
  Configure project.

env-create:ENV [GIT_BRANCH]
  Create environment. Creates build trigger for the given branch if branch
  was given as argument. Otherwise uses default branch determined by ENV.

env-update:ENV
  Update environment. NOTE: not implemented

env-delete:ENV
  Delete environment.

env-rotate:ENV
  Rotate secrets for the environment.

env-cert[:ENV] DOMAIN
  Add a custom certificate instead of automatically generated.


PROJECT: CONTACTS
-----------------

contacts-development
  List of contacts required for development. TIP: Enable the npm plugin and
  implement contacts-development script in your package.json.

contacts-maintenance
  List contacts that should be notified of a maintenance break, incident or
  some other problems. TIP: Enable the npm plugin and implement
  contacts-maintenance script in your package.json.

contacts-users [TYPE]
  TODO optional command for listing users that should be notified of incidents,
  etc? Generated from user database?
