timeout: 1200s

steps:
- id: install
  name: 'gcr.io/cloud-builders/npm'
  args: ['install']
- id: scan
  name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'scan']
- id: secrets
  waitFor: ['-']
  name: 'gcr.io/cloud-builders/kubectl'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "# Get credentials" && \
    gcloud container clusters get-credentials "kube1" \
      --zone "europe-west1-c" && \

    # Get github token from Kubernetes secrets
    kubectl --namespace "devops" get secret "git.github.build" -o yaml | \
      grep "^  SECRET" | sed -e "s/^.*: //" | base64 --decode > github-token.tmp

- id: release-pre
  waitFor: ['secrets']
  name: 'gcr.io/cloud-builders/npm'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    github_token=$$(cat github-token.tmp)

    echo "# Cloning git repo to release directory as google container"
    echo "# builder workspace does not point to the original repository"
    git clone "https://${github_token}@github.com/TaitoUnited/taito-cli.git" \
      release && \
    cd release && \
    git checkout master && \
    npm install && \

    echo "# Running semantic-release pre" && \
    NPM_TOKEN=none GH_TOKEN=${github_token} npm run ci-release-pre && \
    rm -f .npmrc && \

    echo "# Copying package.json with a new version number" && \
    cp package.json ..

- id: build
  name: 'gcr.io/cloud-builders/docker'
  env:
    - project_id=$PROJECT_ID
    - repo_name=$REPO_NAME
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker build -t eu.gcr.io/$${project_id}/$${repo_name}/cli:latest .

- id: test
  name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'test']

- id: release-post
  name: 'gcr.io/cloud-builders/npm'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "# Running semantic-release post" && \
    github_token=$$(cat github-token.tmp) && \
    cd release && \
    NPM_TOKEN=none GH_TOKEN=${github_token} npm run ci-release-post

- id: push
  name: 'gcr.io/cloud-builders/docker'
  env:
    - project_id=$PROJECT_ID
    - repo_name=$REPO_NAME
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Read version number that semantic-release wrote on the package.json
    # and tag image with it
    echo "Fetching version from package.json"
    tag=$$(grep "version" package.json | grep -o "[0-9]*\.[0-9]*\.[0-9]*")
    echo "Using tag $${tag}" && \
    docker image tag eu.gcr.io/$${project_id}/$${repo_name}/cli:latest \
      eu.gcr.io/$${project_id}/$${repo_name}/cli:$${tag} && \
    echo "Pushing latest" && \
    docker push eu.gcr.io/$${project_id}/$${repo_name}/cli:latest && \
    echo "Pushing $${tag}" && \
    docker push eu.gcr.io/$${project_id}/$${repo_name}/cli:$${tag}
